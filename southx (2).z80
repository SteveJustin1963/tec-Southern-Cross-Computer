;
;
;               Z8T Cross Assembler Version 1.0              
;
;Source File Name: SCMV1_21.Z8T                                        Page  1
;
;
                ;--------------------------------------------
                ; S O U T H E R N   C R O S S   M O N I T O R
                ;--------------------------------------------
                ;
                ; WRITTEN BY CRAIG R. S. JONES
                ; MELBOURNE, AUSTRALIA.
                ; FOR -
                ; DIY ELECTRONICS
                ; GPO BOX 904
                ; HONG KONG
                ; PHONE : 852-7250610
                ;
                ; VERSION : 1.2  01/93. V1.21 7/93
                ;
                ;-----------------
                ; SYSTEM VARIABLES
                ;-----------------
RAMSRT  EQU     2000H   ;START OF USER RAM
RAMEND  EQU     3BFFH   ;END OF USER RAM
SYSTEM  EQU     3F00H   ;SYSTEM POINTER
                ;
                ; BAUD RATE CONSTANTS
                ;
B300    EQU     0220H   ;300 BAUD
B1200   EQU     0080H   ;1200 BAUD
B2400   EQU     003FH   ;2400 BAUD
B4800   EQU     001BH   ;4800 BAUD
B9600   EQU     000BH   ;9600 BAUD
                ;
                ; I/O PORT ADDRESSES
                ;
IO0     EQU     80H     ;IO PORT 0
IO1     EQU     81H     ;IO PORT 1
IO2     EQU     82H     ;IO PORT 2
IO3     EQU     83H     ;IO PORT 3
DISPLY  EQU     84H     ;DISPLAY LATCH
SCAN    EQU     85H     ;DISPLAY SCAN LATCH
KEYBUF  EQU     86H     ;KEYBOARD BUFFER
IO7     EQU     87H     ;SPARE IO ADDRESS
                ;-------------------------
                ; MONITOR GLOBAL VARIABLES
                ;-------------------------
FUNTBL  EQU     3FB4H   ;FN TABLE ADDRESS
                ;
                ; DALLAS SMARTWATCH REGISTERS
                ;
CALMDE  EQU     3FB6H   ;CALENDAR MODE
SWREG0  EQU     3FB8H   ;10THS, 100THS
SWREG1  EQU     3FB9H   ;SECONDS
SWREG2  EQU     3FBAH   ;MINUTES
SWREG3  EQU     3FBBH   ;HOURS
SWREG4  EQU     3FBCH   ;DAY
SWREG5  EQU     3FBDH   ;DATE
SWREG6  EQU     3FBEH   ;MONTH
SWREG7  EQU     3FBFH   ;YEAR
                ;
BAUD    EQU     3FC0H   ;BAUD RATE
KEYTIM  EQU     3FC2H   ;BEEP DELAY
SPTEMP  EQU     3FC4H   ;TEMP SYSTEM CALL SP
                ;
                ; BLOCK FUNCTIONS
                ;
COUNT   EQU     3FC6H   ;NUMBER OF BYTES TO MOVE
BLKSRT  EQU     3FC8H   ;BLOCK START ADDRESS
BLKEND  EQU     3FCAH   ;BLOCK END ADDRESS
BLKDST  EQU     3FCCH   ;DESTINATION ADDRESS
                ;
FUNJMP  EQU     3FCEH   ;FN FN KEY JUMP ADDRESS
                ;
                ; DISPLAY SCAN REGISTERS
                ;
DISBUF  EQU     3FD0H   ;DISPLAY BUFFER
ONTIM   EQU     3FD6H   ;DISPLAY SCAN ON TIME
OFTIM   EQU     3FD7H   ;DISPLAY SCAN OFF TIME
                ;
                ; MONITOR VARIABLES
                ;
MODE    EQU     3FD8H   ;DISPLAY MODE
ADRESS  EQU     3FDAH   ;USER ADDRESS
KEYDEL  EQU     3FDCH   ;AUTO INCREMENT DELAY
                ;
                ; TEMPORARY REGISTER STORAGE
                ;
REGPNT  EQU     3FDEH   ;REGISTER POINTER
PC_REG  EQU     3FE0H   ;PROGRAM COUNTER
AF_REG  EQU     3FE2H   ;ACCUMULATOR,FLAG
BC_REG  EQU     3FE4H   ;BC REGISTER PAIR
DE_REG  EQU     3FE6H   ;DE REGISTER PAIR
HL_REG  EQU     3FE8H   ;HL REGISTER PAIR
IX_REG  EQU     3FEAH   ;INDEX REGISTER X
IY_REG  EQU     3FECH   ;INDEX REGISTER Y
SP_REG  EQU     3FEEH   ;STACK POINTER
                ;
                ; RESTART JUMP TABLE AND HARWARE TEST
                ;
RST08   EQU     3FF0H   ;RESTART 08H JUMP
RST10   EQU     3FF2H   ;RESTART 10H JUMP
RST18   EQU     3FF4H   ;RESTART 18H JUMP
RST20   EQU     3FF6H   ;RESTART 20H JUMP
RST28   EQU     3FF8H   ;RESTART 28H JUMP
RST38   EQU     3FFAH   ;INT INTERRUPT JUMP
RST66   EQU     3FFCH   ;NMI INTERRUPT JUMP
RAMSUM  EQU     3FFEH   ;USER RAM CHECKSUM
DALLAS  EQU     3FFFH   ;RAM TEST LOCATION
                ;----------------
                ; RESTART VECTORS
                ;----------------
                ;
                ;  RESTART 00H - RST 0
                ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
                ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
                ;
        ORG     0000H
RSTVEC  JP      RESET
                ;
                ; RESTART 08H - RST 1
                ;
        ORG     0008H
        PUSH    HL
        LD      HL,(RST08)
        JP      (HL)
                ;
                ; RESTART 10H - RST 2
                ;
        ORG     0010H
        PUSH    HL
        LD      HL,(RST10)
        JP      (HL)
                ;
                ; RESTART 18H - RST 3
                ;
        ORG     0018H
        PUSH    HL
        LD      HL,(RST18)
        JP      (HL)
                ;
                ; RESTART 20H - RST 4
                ;
        ORG     0020H
        PUSH    HL
        LD      HL,(RST20)
        JP      (HL)
                ;
                ; RESTART 28H - RST 5
                ;
        ORG     0028H
        PUSH    HL
        LD      HL,(RST28)
        JP      (HL)
                ;
                ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
                ;
        ORG     0030H
RST30   JP      SYSCALL
                ;
                ; RESTART 38H - RST 7     BREAKPOINT HANDLER
                ;IF INTERRUPTS ARE ENABLED,AND AN
                ;INT OCCURS- FURTHER INTERRUPTS
                ;ARE DISABLED, THE PROGRAM COUNTER
                ;IS PUSHED ONTO THE STACK, AND EXECUTION
                ;STARTS HERE
                ;
        ORG     0038H
        PUSH    HL
        LD      HL,(RST38)
        JP      (HL)
                ;
                ; RESTART 66H NMI VECTOR
                ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
                ;
        ORG     0066H
        PUSH    HL
        LD      HL,(RST66)
        JP      (HL)
                ;--------------------
                ; SYSTEM CALL HANDLER
                ;--------------------
                ;CALLS TO BASIC I/O AND OTHER ROUTINES
                ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
                ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
                ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
                ;CHANGE IN SUBSEQUENT MONITORS
                ;
                ;ENTRY : C = CALL NUMBER
                ;SEE ROUTINES FOR ENTRY AND EXIT
                ;PARAMETERS
                ;
SYSCALL    DEC     SP
        DEC     SP      ;LEAVE SPACE FOR SYSCALL
        LD      (SPTEMP),SP     ;POINTS TO SYSCALL LO
        PUSH    AF
        PUSH    DE
        PUSH    HL      ;SAVE REGISTERS
        LD      A,C     ;GET CALL NUMBER
        AND     127     ;ENSURE IN LIMITS
        SLA     A       ;MULTIPLY BY TWO
        LD      H,1     ;LOAD JUMP TABLE HIGH BYTE
        LD      L,A     ;LOAD INDEX
        LD      A,(HL)
        INC     HL
        LD      D,(HL)  ;GET JUMP ADDRESS
        LD      HL,(SPTEMP)     ;POINT TO SYSCALL LO
        LD      (HL),A  ;PUT SYSCALL LO ON STACK
        INC     HL
        LD      A,D
        LD      (HL),A  ;PUT SYSCALL HI ON STACK
        POP     HL
        POP     DE
        POP     AF      ;RESTORE REGISTERS
        RET             ;JUMPS TO SYSTEM CALL
                ;-----------------------
                ; SYSTEM CALL JUMP TABLE
                ;-----------------------
        ORG     0100H
SYSJMP  DEFW    MAIN,VERS
        DEFW    DISADD,DISBYT,CLRBUF,SCAND
        DEFW    CONBYT,CONVHI,CONVLO
        DEFW    SKEYIN,SKEYRL,KEYIN,KEYREL
        DEFW    MENU,CHKSUM
        DEFW    MUL16,RAND
        DEFW    INDEXB,INDEXW
        DEFW    MUSIC,TONE,BEEP
        DEFW    SKATE
        DEFW    TXDATA,RXDATA,ASCHEX
        DEFW    WWATCH,RWATCH,ONESEC
        DEFW    RLSTEP,DELONE
                ;------------------------------
                ; POWER UP RESET / MANUAL RESET
                ;------------------------------
        ORG     0200H
                ;
                ; WAIT FOR SMART SOCKET
                ; TO RECOVER FROM POWER DOWN
                ;
RESET   LD      A,55H
        LD      (DALLAS),A      ;WRITE TO RAM
        XOR     A
        OUT     (DISPLY),A      ;WRITE NOTHING TO
        OUT     (SCAN),A        ;ON BOARD I/O
        IN      A,(KEYBUF)      ;TO HELP DEBUGGING
        LD      A,(DALLAS)      ;READ FROM RAM
        CP      55H     ;IS IT READY?
        JP      NZ,RESET        ;KEEP TRYING
                ;
                ; LOAD STACK POINTER
                ;
RESET1  LD      SP,SYSTEM
                ;
                ; SET UP RESTART VECTORS
                ;
        LD      HL,RESET1
        LD      (RST08),HL
        LD      (RST10),HL
        LD      (RST18),HL
        LD      (RST20),HL
        LD      (RST28),HL
        LD      (RST66),HL      ;NMI INTERRUPT
        LD      HL,SSTEP
        LD      (RST38),HL      ;SINGLE STEPPER
                ;
                ; SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
                ;
        IM      1
        EI              ;ENABLE INTERRUPTS
                ;
                ; PERFORM CHECKSUM ON USER RAM
                ;
        LD      HL,RAMSRT       ;START OF USER RAM
        LD      DE,RAMEND       ;END OF USER RAM
        CALL    CHKSUM
        LD      (RAMSUM),A      ;RAM CHECKSUM
                ;
                ; SET UP DEFAULT VARIABLES
                ;
        LD      HL,FUNLST
        LD      (FUNTBL),HL     ;FUNCTION KEY TABLE
        LD      HL,CANCEL
        LD      (FUNJMP),HL     ;FN FN JUMP
        LD      A,00H
        LD      (REGPNT),A      ;INIT SINGLE STEPPER
        LD      HL,B4800
        LD      (BAUD),HL       ;DEFAULT SERIAL=4800 BAUD
        LD      HL,0100H
        LD      (KEYDEL),HL     ;INSTEAD OF BEEP DELAY
        LD      A,07H
        LD      (ONTIM),A       ;DISPLAY ON TIME
        LD      A,0AH
        LD      (OFTIM),A       ;DISPLAY OFF TIME
        CALL    BEEP
        CALL    BEEP
                ;-----------------
                ; SET UP MAIN LOOP
                ;-----------------
MAIN    LD      SP,SYSTEM       ;SET STACK
        LD      HL,RAMSRT
        LD      (ADRESS),HL     ;DEFAULT ADDRESS
        LD      A,(MODE)
        OR      80H     ;START OFF IN DATA MODE
        LD      (MODE),A
                ;
                ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
                ;
MAIN1   CALL    UPDATE
MAIN2   CALL    SKEYIN  ;WAIT FOR A KEY
        LD      HL,MENLST       ;USE THE MENU HANDLER
        CALL    MENU    ;ROUTINE FOR EACH KEY
        CALL    UPDATE  ;UPDATE BUFFER AND
        CALL    SKEYRL  ;WAIT FOR KEY RELEASE
        JP      MAIN2
                ;
                ; MAIN MENU KEY TABLE
                ;
MENLST  DEFB    20
        DEFB    00H,01H,02H,03H,04H,05H,06H,07H
        DEFB    08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
        DEFB    10H,11H,12H,13H
        DEFW    HEXKEY,HEXKEY,HEXKEY,HEXKEY
        DEFW    HEXKEY,HEXKEY,HEXKEY,HEXKEY
        DEFW    HEXKEY,HEXKEY,HEXKEY,HEXKEY
        DEFW    HEXKEY,HEXKEY,HEXKEY,HEXKEY
        DEFW    FUNKEY,ADDKEY,INCKEY,DECKEY
                ;---------------------------------------------------
                ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
                ;---------------------------------------------------
HEXKEY  CALL    BEEP
        LD      HL,MODE
        BIT     7,(HL)  ;ADDR OR DATA MODE?
        JP      Z,HEXKY2        ;IN ADDR MODE
                ;
                ; IN DATA MODE
                ;
HEXKY1  LD      HL,(ADRESS)
        SLA     (HL)    ;FROM THE CURRENT
        SLA     (HL)    ;ADDRESS,MOVE THE
        SLA     (HL)    ;LSN TO THE MSN.
        SLA     (HL)    ;PUT THE KEY IN
        OR      (HL)    ;THE NEW DATA BACK AT
        LD      (HL),A  ;THE CURRENT ADDRESS.
        RET
                ;
                ; IN ADDRESS MODE
                ;
HEXKY2  LD      HL,(ADRESS)
        SLA     L       ;CURRENT ADDRESS
        RL      H       ;AND DO A 16 BIT
        SLA     L       ;LEFT SHIFT 4 TIMES
        RL      H       ;TO MAKE  ROOM
        SLA     L       ;FOR THE NEW KEY
        RL      H
        SLA     L
        RL      H
        OR      L       ;IT IN THE LEAST
        LD      L,A     ;SIGNIFICANT NYBBLE
        LD      (ADRESS),HL     ;SAVE CURRENT ADDRESS
        RET
                ;-------------
                ; CHANGE MODES
                ;-------------
ADDKEY  CALL    BEEP
        LD      A,(MODE)
        XOR     80H     ;TOGGLE MODE
        LD      (MODE),A
        RET
                ;------------------
                ; INCREMENT ADDRESS
                ;------------------
INCKEY  CALL    BEEP
INCKY1  LD      HL,(ADRESS)
        INC     HL      ;INC ADDRESS
        LD      (ADRESS),HL
        CALL    UPDATE
        LD      HL,(KEYDEL)
INCKY2  CALL    SCAND
        IN      A,(KEYBUF)
        BIT     5,A     ;RETURN IF +
        JR      Z,INCKY3        ;KEY RELEASED
        LD      DE,0001H
        SBC     HL,DE
        JP      NC,INCKY2
        JP      INCKY1
INCKY3  RET
                ;------------------
                ; DECREMENT ADDRESS
                ;------------------
DECKEY  CALL    BEEP
DECKY1  LD      HL,(ADRESS)
        DEC     HL      ;DEC ADDRESS
        LD      (ADRESS),HL
        CALL    UPDATE
        LD      HL,(KEYDEL)
DECKY2  CALL    SCAND
        IN      A,(KEYBUF)      ;READ KEYBOARD
        BIT     5,A     ;RETURN IF
        JR      Z,DECKY3        ; - KEY RELEASED
        LD      DE,0001H
        SBC     HL,DE
        JP      NC,DECKY2
        JP      DECKY1
DECKY3  RET
                ;-----------------------------------------
                ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
                ;-----------------------------------------
UPDATE  LD      HL,(ADRESS)
        CALL    DISADD  ;AND DATA, PUT IN
        LD      A,(HL)
        CALL    DISBYT  ;DISPLAY BUFFER
                ;
                ; IN ADDRESS OR DATA MODE?
        LD      HL,MODE
        BIT     7,(HL)  ;DATA OR ADDR MODE?
        JP      Z,ADMODE        ;ADDRESS MODE
                ;
                ; SHOW DATA MODE
                ;
        LD      HL,DISBUF
        LD      B,2     ;IN THE DATA
        JP      SETDP   ;DISPLAY
                ;
                ; SHOW ADDRESS MODE
                ;
ADMODE  LD      HL,DISBUF+2
        LD      B,4     ;SET THE DP'S IN THE
                ;
                ; SET DECIMAL POINT
                ;
                ;SET BIT 7 IN THE BYTE POINTED TO BY HL
                ;
SETDP   SET     7,(HL)  ;SET BIT 7
        INC     HL      ;POINT TO NEXT BYTE
        DJNZ    SETDP   ;MORE BITS TO SET
        RET
                ;---------------
                ; VERSION NUMBER
                ;---------------
                ;RETURNS THE SOFTWARE VERSION NUMBER
                ;SHOULD FUTURE MONITORS EXHIBIT DIFFERENCES
                ;THE VERSION NUMBER CAN BE USED TO COMPENSATE
                ;
                ;       ENTRY : NONE
                ; EXIT : H = ASCII MINOR VERSION NUMBER
                ;        L = ASCII MAJOR VERSION NUMBER
                ;
VERS    LD      HL,3132H
        RET
                ;-------------------------
                ; ADDRESS > DISPLAY BUFFER
                ;-------------------------
                ;CONVERT HL TO SEVEN SEGMENT CODE
                ;AND PUT IN ADDRESS DISPLAY BUFFER.
                ;
                ; ENTRY : HL = ADDRESS TO BE DISPLAYED
                ;
                ; EXIT  : NO REGISTERS MODIFIED
                ;
DISADD  PUSH    AF
        PUSH    HL
        PUSH     HL
        LD      A,H
        CALL    CONBYT
        LD      (DISBUF+4),HL
        POP     HL
        LD      A,L
        CALL    CONBYT
        LD      (DISBUF+2),HL
        POP     HL
        POP     AF
        RET
                ;---------------------------
                ; DATA BYTE > DISPLAY BUFFER
                ;---------------------------
                ;CONVERT THE ACC TO SEVEN SEGMENT CODE
                ;AND PUT IN DATA DISPLAY BUFFER.
                ;
                ; ENTRY :  A = DATA DISPLAY BYTE
                ;
                ; EXIT  : NO REGISTERS MODIFIED
                ;
DISBYT  PUSH    HL
        CALL    CONBYT
        LD      (DISBUF),HL
        POP     HL
        RET
                ;---------------------------------------
                ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
                ;---------------------------------------
                ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
                ; FOR DISPLAY
                ; ENTRY : A = BYTE TO BE CONVERTED
                ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
                ;         L = LO NYBBLE SEVEN SEGMENT CODE
                ;         A = NOT MODIFIED
CONBYT  PUSH    AF
        PUSH    AF
        CALL    CONVHI  ;CONVERT HI NYBBLE
        LD      H,A
        POP     AF
        CALL    CONVLO  ;CONVERT LO NYBBLE
        LD      L,A
        POP     AF
        RET
                ;---------------------------------------------
                ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
                ;---------------------------------------------
                ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
                ; FOR SEVEN SEGMENT DISPLAYS
                ; CONVHI = CONVERTS HIGH NYBBLE
                ; CONVLO = CONVERTS LO NYBBLE
                ;
                ; ENTRY : A = NYBBLE TO BE CONVERTED
                ; EXIT  : A = SEVEN SEGMENT CODE
                ;
CONVHI  RLCA
        RLCA
        RLCA    ;MOVE TO LO NYBBLE
        RLCA    ;FOR CONVERSION
CONVLO  PUSH    BC
        PUSH    HL
        LD      HL,SEGMNT       ;USE THE HEX VALUE
        AND     0FH     ;TO INDEX TO THE
        LD      C,A     ;THE SEVEN SEGMENT
        LD      B,00H   ;CODE FOR THAT VALUE
        ADD     HL,BC   ;AND RETURN WITH
        LD      A,(HL)  ;CODE IN A
        POP     HL
        POP     BC
        RET
                ;
                ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
                ;
SEGMNT  DEFB    3FH,06H,5BH,4FH ;0,1,2,3
        DEFB    66H,6DH,7DH,07H ;4,5,6,7
        DEFB    7FH,6FH,77H,7CH ;8,9,A,B
        DEFB    39H,5EH,79H,71H ;C,D,E,F
                ;-------------
                ; SCAN DISPLAY
                ;-------------
                ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
                ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
                ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
                ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
                ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
                ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
                ;
                ; ENTRY : NONE
                ; EXIT  : NO REGISTERS MODIFIED
                ;
SCAND   PUSH    AF
        PUSH    BC
        PUSH    HL      ;SAVE REGISTERS
        LD      HL,DISBUF+5
        LD      C,20H
SCAND1  LD      A,(HL)
        OUT     (DISPLY),A      ;OUTPUT CHARACTER
        LD      A,C
        OUT     (SCAN),A        ;TURN ON DISPLAY
        LD      A,(ONTIM)       ;DO A SHORT DELAY
        LD      B,A     ;TO ADJUST ON TIME
SCAND2  DJNZ    SCAND2  ;OF DISPLAY
        LD      A,B     ;B IS NOW CLEAR, USE
        OUT     (SCAN),A        ;IT TO TURN OFF SCAN
        LD      A,(OFTIM)       ;DO A SHORT DELAY
        LD      B,A     ;TO ADJUST OFF TIME
SCAND3  DJNZ    SCAND3  ;OF DISPLAY
        DEC     HL      ;POINT TO NEXT
        RRC     C       ;ELEMENT IN BUFFER
        JR      NC,SCAND1       ;DISPLAY NEXT ELEMENT
        LD      A,B     ;B IS NOW CLEAR, USE
        OUT     (SCAN),A        ;IT TO TURN OFF SCAN
        OUT     (DISPLY),A      ;AND CLEAR DISPLAY LATCH
        POP     HL
        POP     BC
        POP     AF      ;RESTORE REGISTERS
        RET
                ;---------------------
                ; CLEAR DISPLAY BUFFER
                ;---------------------
CLRBUF  PUSH    HL
        PUSH    BC
        LD      HL,DISBUF
        LD      B,6
CLRBF1  LD      (HL),00H        ;PUT ZERO IN 6
        INC     HL      ;LOCATIONS POINTED
        DJNZ    CLRBF1  ;TO BY HL
        POP     BC
        POP     HL
        RET
                ;------------------
                ; KEYBOARD ROUTINES
                ;------------------
                ;-----------------------------
                ; SCAN DISPLAY UNTIL KEY PRESS
                ;-----------------------------
                ; ENTRY : NONE
                ; EXIT  : A = KEY VALUE 00H TO 1FH
                ;         FLAG REGISTER MODIFIED
                ;
SKEYIN  CALL    SCAND   ;SCAN DISPLAY
        IN      A,(KEYBUF)      ;READ KEYBOARD
        BIT     5,A     ;DA  HIGH?
        JR      Z,SKEYIN        ;NO KEY PRESS
        AND     1FH     ;STRIP UNUSED BITS
        RET
                ;-------------------------------
                ; SCAN DISPLAY UNTIL KEY RELEASE
                ;-------------------------------
                ; ENTRY : NONE
                ; EXIT  : NONE
                ;
SKEYRL  PUSH    AF
SKEYL1  CALL    SCAND   ;SCAN DISPLAY
        IN      A,(KEYBUF)      ;READ KEYBOARD
        BIT     5,A     ;DA LOW?
        JR      NZ,SKEYL1       ;KEY NOT RELEASED
        POP     AF
        RET
                ;-------------------
                ; WAIT FOR KEY PRESS
                ;-------------------
                ; ENTRY : NONE
                ; EXIT  : A = KEY VALUE 00H TO 1FH
                ;         FLAG REGISTER MODIFIED
                ;
KEYIN   IN      A,(KEYBUF)      ;READ KEYBOARD
        BIT     5,A
        JR      Z,KEYIN ;NO KEY PRESS
        AND     1FH     ;STRIP UNUSED BITS
        RET
                ;---------------------
                ; WAIT FOR KEY RELEASE
                ;---------------------
                ; ENTRY : NONE
                ; EXIT  : NONE
                ;
KEYREL  PUSH    AF
KEYRL1  IN      A,(KEYBUF)
        BIT     5,A
        JR      NZ,KEYRL1
        POP     AF
        RET
                ;-----------------
                ; KEY MENU HANDLER
                ;-----------------
                ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
                ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
                ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
                ; ENTRY :  A = ELEMENT TO LOOK FOR
                ;         HL = POINTS TO TABLE
                ; EXIT  :  ELEMENT NOT FOUND
                ;           HL HOLDS ADDRESS OF LAST ELEMENT
                ;          ELEMENT FOUND
                ;           CONTROL PASSES TO JUMP ADDRESS WITH
                ;          RETURN ADDRESS OF MENU CALL ON STACK
                ;
MENU    PUSH    AF
        PUSH    BC
        PUSH    DE      ;SAVE REGISTERS
        PUSH    HL      ;CALCULATE ADDRESS
        LD      D,00H   ;OF THE JUMP TABLE BY
        LD      E,(HL)  ;ADDING THE INDEX TO
        INC     HL      ;THE ELEMENTS
        ADD     HL,DE   ;TO THE ADDR OF THE
        LD      D,H     ;TABLE
        LD      E,L
        POP     HL
        LD      B,(HL)  ;GET NUMBER OF ENTRIES
        INC     HL      ;POINT TO LIST OF ENTRIES
MENU1   CP      (HL)    ;COMPARE WITH ENTRY
        JR      Z,MENU2 ;FOUND VALUE IN TABLE
        INC     HL      ;NEXT ENTRY IN LIST
        INC     DE      ;NEXT ENTRY IN
        INC     DE      ;JUMP TABLE
        DJNZ    MENU1   ;CHECK MORE ENTRIES
        POP     DE
        POP     BC
        POP     AF
        RET     ;NOT IN TABLE
                ;
                ; FOUND ELEMENT IN THE TABLE
                ; PASS CONTROL TO THE JUMP HANDLER
                ;
MENU2   LD      A,(DE)  ;GET THE JUMP ADDR
        LD      L,A     ;FROM THE TABLE
        INC     DE      ;AND JUMP TO
        LD      A,(DE)  ;THE JUMP ADDRESS
        LD      H,A     ;FOR THAT ENTRY
        POP     DE
        POP     BC
        POP     AF      ;RESTORE REGISTERS
        JP      (HL)
                ;-------------------
                ; CALCULATE CHECKSUM
                ;-------------------
                ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
                ;
                ; ENTRY : HL = START OF BLOCK TO SUM
                ;         DE = END OF BLOCK TO SUM
                ; EXIT  : A =  CHECKSUM
                ;         FLAG REGISTER MODIFIED
                ;
CHKSUM  PUSH    HL
        PUSH    DE
        INC     DE      ;END OF BLOCK+1
        XOR     A       ;CLEAR CHECKSUM
CHKSM1  ADD     A,(HL)  ;COMPUTE CHEKSUM
        INC     HL      ;POINT TO NEXT ELEMENT
        AND     A       ;SET CARRY
        PUSH    HL
        SBC     HL,DE   ;SUBTRACT
        POP     HL
        JR      C,CHKSM1        ;MORE ELEMENTS
        POP     DE
        POP     HL
        RET
                ;--------------------------
                ; ACCESS BYTE LOOK UP TABLE
                ;--------------------------
                ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
                ; UP TABLE
                ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
                ;         HL = ADDRESS OF LOOK UP TABLE
                ; EXIT : HL = ADDRESS OF ELEMENT A
                ;
INDEXB  PUSH    DE
        LD      E,A     ;USE DE AS INDEX
        LD      D,0     ;TO ELEMENT IN TABLE
        ADD     HL,DE   ;BY ADDING TO HL
        POP     DE
        RET
                ;--------------------------
                ; ACCESS WORD LOOK UP TABLE
                ;--------------------------
                ; USE 8 BIT INDEX TO ACCESS WORD LOOK
                ; UP TABLE
                ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
                ;         HL = ADDRESS OF LOOK UP TABLE
                ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
                ;
INDEXW  PUSH    DE
        LD      E,A
        SLA     E       ;MULTIPLY BY TWO
        LD      D,0
        ADD     HL,DE
        POP     DE
        RET
                ;-------------------------------
                ; GENERATE A QUASI-RANDOM NUMBER
                ;-------------------------------
                ; GENERATE AN 16 BIT RANDOM NUMBER
                ; USING LINEAR CONGRUENTIAL METHOD.
                ;     Rn+1 = (aRn+c) MOD m
                ; REFRESH REGISTER USED FOR Rn AND c
                ;       ENTRY : NONE
                ;       EXIT  : HL = RANDOM WORD
                ;       NO REGISTERS MODIFIED
                ;
RAND    PUSH    AF
        PUSH    BC
        PUSH    DE      ;SAVE REGISTERS
                ;
                ; CALCULATE aRn
                ;
        LD      A,R     ;MULTIPLY RANDOM NUMBER
        LD      E,A     ;(Rn) BY
        LD      D,0
        LD      HL,0548H        ;CONSTANT (a)
        CALL    MUL16
                ;
                ; CALCULATE aRn+c
                ;
        LD      A,R     ;ADD IT TO ANOTHER
        LD      B,0     ;READ OF THE
        LD      C,A     ;THE REFRESH
        ADD     HL,BC   ;REGISTER (c)
        POP     DE
        POP     BC
        POP     AF      ;RESTORE REGISTERS
        RET
                ;----------------------
                ; 16 BIT MULTIPLICATION
                ;----------------------
                ;16 BIT MULTIPLY
                ; ENTRY : HL = MULTIPLICAND (MPD)
                ;         DE = MULTIPLIER (MPR)
                ; EXIT : HL = RESULT
                ;SEE ZAKS 'PROGRAMMING THE Z80'
                ;
MUL16   PUSH    AF
        PUSH    BC
        LD      C,H     ;MPR(H)
        LD      A,L     ;MPR(L)
        LD      B,16    ;BIT COUNTER
        LD      HL,0    ;CLEAR RESULT
MULT    SRL     C       ;MPR (H)
        RRA             ;MPR (L)
        JR      NC,MULT1    ;TEST CARRY
        ADD     HL,DE   ;ADD MPD TO RESULT
MULT1   EX      DE,HL
        ADD     HL,HL   ;DOUBLE -SHIFT MPD LEFT
        EX      DE,HL
        DJNZ    MULT    ;DONE?
        POP     BC
        POP     AF
        RET
                ;----------------
                ; MUSIC SEQUENCER
                ;----------------
                ; SEQUENCES THROUGH A TABLE OF NOTES
                ; 1EH = REPEAT TUNE UNTIL RESET
                ; 1FH = PLAY ONCE AND RETURN
                ; ENTRY : HL = ADDRESS OF NOTE TABLE
                ; EXIT : NO REGISTERS MODIFIED
MUSIC   PUSH    AF
        PUSH    BC
        PUSH    DE
        PUSH    HL      ;SAVE REGISTERS
        PUSH    HL ; why twice ??
        EX      DE,HL   ;GET ADDRESS OF MUSIC
                ;
                ; PLAY EACH NOTE IN TURN
                ;
STEP    LD      A,(DE)  ;GET ELEMENT FROM TABLE
        AND     1FH     ;STRIP UNUSED BITS
                ;
                ; IF ELEMENT IS 00H PAUSE FOR A WHILE
                ;
        CP      00H
        JP      NZ,STEP1
        LD      BC,1000H
PAUSE   DEC     BC
        LD      A,B
        OR      C
        JP      NZ,PAUSE        ;LOOP UNTIL DE = 0
        INC     DE      ;POINT TO NEXT ELEMENT
        JP      STEP
                ;
                ; IF ELEMENT IS 1EH REPEAT TUNE
                ;
STEP1   CP      1EH
        JP      NZ,STEP2
        POP     DE      ;GET TABLE ADDRESS BACK
        PUSH    DE      ;SAVE IT FOR LATER
        JP      STEP
                ;
                ; IF ELEMENT IS 1FH RETURN
                ;
STEP2   CP      1FH     ;END OF TUNE TABLE?
        JP      NZ,STEP3
        POP     HL
        POP     HL
        POP     DE
        POP     BC
        POP     AF
        RET
                ;
                ;NOW PLAY THE NOTE
                ;
STEP3   LD      B,A     ;SAVE ELEMENT IN B
        LD      HL,PERIOD       ;POINT TO PERIOD/2 TABLE
        CALL    INDEXB  ;GET PERIOD/2
        LD      A,(HL)  ;GET ELEMENT
        PUSH    AF      ;SAVE FOR LATER
        LD      A,B     ;GET ELEMENT BACK IN A
        LD      HL,LENGTH       ;POINT TO DURATION/2 TABLE
        CALL    INDEXB  ;GET DURATION/2
        LD      A,(HL)  ;GET ELEMENT
        LD      L,A
        LD      H,0     ;HL = DURATION/2
        POP     AF
        CALL    TONE    ;DO NOTE ROUTINE
        INC     DE
        JP      STEP    ;STEP TO NEXT ELEMENT
                ;
                ; PERIOD/2 OF NOTE
                ;
PERIOD  DEFB    8CH,83H,7CH,75H,70H,67H,62H,5CH
        DEFB    57H,52H,4EH,48H,45H,41H,3CH,39H
        DEFB    36H,32H,2FH,2CH,2AH,27H,25H,23H
                ;
                ; NOTE DURATION/2
                ;
LENGTH  DEFB    19H,1AH,1CH,1DH,1EH,20H,23H,25H
        DEFB    27H,29H,2CH,2EH,31H,33H,37H,3AH
        DEFB    3DH,41H,45H,49H,4DH,52H,57H,5CH
        DEFB    10H
                ;--------------
                ; OUTPUT A TONE
                ;--------------
                ;
                ; ENTRY : A = PERIOD/2 OF NOTE
                ;         HL = DURATION/2 OF NOTE
                ; EXIT NO REGISTERS MODIFIED
TONE    PUSH    AF
        PUSH    BC
        PUSH    DE
        PUSH    HL
        LD      DE,0001H
        LD      C,A
        ADD     HL,HL   ;DOUBLE DURATION
        XOR     A
TONE1   XOR     80H     ;TOGGLE SPEAKER BIT
        OUT     (SCAN),A        ;OUTPUT SPEAKER BIT
        LD      B,C
TONE2   PUSH    BC
        LD      B,02H
TONE3   DJNZ    TONE3   ;DELAY FOR PERIOD/2
        POP     BC
        DJNZ    TONE2   ; DELAY FOR PERIOD/2
        SBC     HL,DE   ;END OF NOTE?
        JR      NZ,TONE1        ;DO AGAIN
        POP     HL
        POP     DE
        POP     BC
        POP     AF
        RET
                ;---------------
                ; KEY ENTRY BEEP
                ;---------------
BEEP    PUSH    HL
        PUSH    AF
        LD      HL,MODE
        BIT     6,(HL)  ;BEEP ENABLED?
        JR      Z,BEEP2 ;BEEP IS ENABLED
                ;
                ; DO KEYPRESS DELAY
                ;
        PUSH    DE      ;DO A SHORT
        LD      DE,0001H        ;DELAY TO PREVENT
        LD      HL,(KEYTIM)     ;RECOGNITION
BEEP1   SBC     HL,DE   ;OF DOUBLE
        JR      NC,BEEP1        ;KEY STROKES
        POP     DE
        JR      BEEP3
                ;
                ; OUTPUT KEYPRESS TONES
                ;
BEEP2   LD      A,24H
        LD      HL,0030H
        CALL    TONE    ;DO FIRST TONE
        LD      A,0EH
        LD      HL,0050H
        CALL    TONE    ;DO SECOND TONE
BEEP3   POP     AF
        POP     HL
        RET
                ;----------------------------------------
                ; BREAKPOINT AND SINGLE STEPPING ROUTINES
                ;----------------------------------------
                ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
                ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
                ; ATTACHED).
                ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
                ; AND MODIFY REGISTERS.
                ;
SSTEP   POP     HL      ;GET HL BACK
        PUSH    AF      ;SAVE AF FOR LATER
        LD      (HL_REG),HL
        LD      (DE_REG),DE
        LD      (BC_REG),BC
        LD      (IX_REG),IX
        LD      (IY_REG),IY     ;SAVE REGISTERS
        POP     HL      ;GET AF BACK
        LD      (AF_REG),HL     ;SAVE AF
        POP     HL      ;GET PC RETURN ADDRESS
        LD      (PC_REG),HL     ;SAVE PC
        LD      (SP_REG),SP     ;SAVE STACK POINTER
                ;
                ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
                ;
        CALL    BEEP
        LD      A,(REGPNT)      ;GET CURRENT REG
        AND     7       ;MAKE SURE IN LIMITS
        LD      (REGPNT),A      ;SAVE IT
DISREG  CALL    SETREG  ;SET UP DISPLAY BUFFER
        CALL    SKEYRL  ;WAIT FOR A KEY
        CALL    SKEYIN  ;WAIT FOR KEY RELEASE
        LD      HL,REGTBL       ;HANDLE THE KEY
        CALL    MENU    ;AND UPDATE DISPLAY
        JP      DISREG  ;BEFORE RETURNING TO LOOP
                ;
                ; REGISTER DISPLAY KEY TABLE
                ;
REGTBL  DEFB    14H
        DEFB    00H,01H,02H,03H,04H,05H,06H,07H
        DEFB    08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
        DEFB    10H,11H,12H,13H
        DEFW    REGKEY,REGKEY,REGKEY,REGKEY
        DEFW    REGKEY,REGKEY,REGKEY,REGKEY
        DEFW    REGKEY,REGKEY,REGKEY,REGKEY
        DEFW    REGKEY,REGKEY,REGKEY,REGKEY
        DEFW    RETMON,RETPGM,INCSTP,DECSTP
                ;
                ; REGISTER NAME CHARACTERS
                ;
REGNAM  DEFW    7339H
        DEFW    7771H,7C39H,5E79H
        DEFW    7438H,0676H,066EH
        DEFW    6D73H
                ;--------------
                ; EDIT REGISTER
                ;--------------
REGKEY  CALL    BEEP
        PUSH    AF      ;SAVE KEY FOR LATER
        LD      A,(REGPNT)
                ;
                ; EDIT REGISTER
                ;
        LD      HL,PC_REG
        CALL    INDEXW
        LD      C,(HL)
        INC     HL
        LD      B,(HL)  ;GET REG CONTENTS
        SLA     C
        RL      B
        SLA     C
        RL      B
        SLA     C
        RL      B       ;SHIFT REGISTER
        SLA     C       ;FOUR BITS
        RL      B       ;LEFT AND
        POP     AF      ;PUT THE KEY
        OR      C       ;INTO THE LSN
        LD      C,A     ;AND PUT THE
        LD      (HL),B  ;REGISTER BACK
        DEC     HL      ;WHERE IT BELONGS
        LD      (HL),C
        RET
                ;------------------
                ; RETURN TO MONITOR
                ;------------------
RETMON  CALL    BEEP
        CALL    SKEYRL
        EI      ;ENABLE INTERRUPTS AGAIN
        JP      MAIN
                ;------------------
                ; RETURN TO PROGRAM
                ;------------------
RETPGM  LD      SP,(SP_REG)     ;PUT STACK POINTER BACK
        LD      HL,(PC_REG)     ;PUT RETURN
        PUSH    HL      ;ADDRESS BACK ON STACK
        LD      HL,(AF_REG)
        PUSH    HL      ;SAVE AF REG FOR LATER
        LD      IY,(IY_REG)
        LD      IX,(IX_REG)
        LD      BC,(BC_REG)
        LD      DE,(DE_REG)     ;RESTORE REGISTERS
        POP     AF      ;RESTORE AF
        LD      HL,(HL_REG)     ;RETORE HL
        EI      ;ENABLE INTERRUPTS
        RET     ;AND RETURN TO PROGRAM
                ;----------------------
                ; DISPLAY NEXT REGISTER
                ;----------------------
INCSTP  CALL    BEEP
        LD      A,(REGPNT)
        CP      A,7     ;END OF REG TABLE?
        JP      Z,INCSP1
        INC     A
        LD      (REGPNT),A
        RET
INCSP1  XOR     A
        LD      (REGPNT),A
        RET
                ;--------------------------
                ; DISPLAY PREVIOUS REGISTER
                ;--------------------------
DECSTP  CALL    BEEP
        LD      A,(REGPNT)
        CP      A,0     ;START OF REG TABLE?
        JP      Z,DECSP1
        DEC     A
        LD      (REGPNT),A
        RET
DECSP1  LD      A,7
        LD      (REGPNT),A
        RET
                ;-----------------
                ; DISPLAY REGISTER
                ;-----------------
SETREG  LD      A,(REGPNT)
        LD      HL,PC_REG       ;START OF TABLE
        CALL    INDEXW  ;GET ELEMENT ADDRESS
        LD      E,(HL)
        INC     HL
        LD      D,(HL)
        EX      DE,HL   ;LOAD REGISTER CONTENTS
        CALL    DISADD
                ;
                ; DISPLAY REGISTER NAME
                ;
        LD      HL,REGNAM
        CALL    INDEXW
        LD      A,(HL)
        LD      (DISBUF+0),A
        INC     HL
        LD      A,(HL)
        LD      (DISBUF+1),A
        RET
                ;------------------
                ; FUNCTION KEY MENU
                ;------------------
                ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
                ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
                ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
                ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
                ;
FUNKEY  POP     HL      ;REMOVE RETURN ADDRESS
        CALL    BEEP
FUNKY1  LD      HL,(ADRESS)
        CALL    DISADD  ;DISP ADDR TO REMOVE DP'S
        LD      HL,7154H
        LD      (DISBUF),HL     ;DISPLAY FN
        CALL    SKEYRL  ;WAIT FOR KEY RELEASE
FUNKY2  CALL    SKEYIN
        LD      HL,(FUNTBL)     ;USE THE MENU HANDLER
        CALL    MENU    ;ROUTINE FOR EACH KEY
        JP      FUNKY2  ;TRY AGAIN
                ;
                ; RETURN TO MAIN
                ;
CANCEL  CALL    BEEP
CANCL1  CALL    UPDATE  ;UPDATE DISPLAY BUFFER
        CALL    SKEYRL  ;WAIT FOR KEY RELEASE
        POP     HL      ;REMOVE MENU RETURN
        JP      MAIN2
                ;
                ; FUNCTION MENU KEY TABLE
                ;
FUNLST  DEFB    11H
        DEFB    00H,01H,02H,03H,04H,05H,06H,07H
        DEFB    08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
        DEFB    10H
        DEFW    GOEXEC,INTELH,ADDRA,ADDRB
        DEFW    BLKMVE,BLKSUM,BRANCH,TRACE
        DEFW    PLAY1,PLAY2,PLAY3,SWBEEP
        DEFW    SECRET,RELSQR,SCOPE,TIME
        DEFW    FUNFUN
                ;--------------------------
                ; JUMP TO FUNCTION FUNCTION
                ;--------------------------
FUNFUN  LD      HL,(FUNJMP)
        JP      (HL)
                ;------------------------------------------
                ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
                ;------------------------------------------
GOEXEC  CALL    BEEP
        CALL    KEYREL
        POP     HL      ;REMOVE EXEC RETURN
        LD      HL,(ADRESS)
        JP      (HL)    ;START EXECUCTION
                ;------------------------------------
                ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
                ;------------------------------------
INTELH  CALL    BEEP
        CALL    KEYREL
        LD      IX,SYSTEM       ;POINT TO SYSTEM VARIABLES
                ;
                ; WAIT FOR RECORD MARK
                ;
INTEL1  XOR     A
        LD      (IX+3),A        ;CLEAR CHECKSUM
        CALL    RXDATA  ;WAIT FOR THE
        JR      C,INTEL5        ;RECORD MARK
        CP      ':'     ;TO BE TRANSMITTED
        JR      NZ,INTEL1       ;NOT RECORD MARK
                ;
                ; GET RECORD LENGTH
                ;
        CALL    GETBYT
        JR      C,INTEL5
        LD      (IX+0),A        ;NUMBER OF DATA BYTES
                ;
                ; GET ADDRESS FIELD
                ;
        CALL    GETBYT
        JR      C,INTEL5
        LD      (IX+2),A        ;LOAD ADDRESS HIGH BYTE
        CALL    GETBYT
        JR      C,INTEL5
        LD      (IX+1),A        ;LOAD ADDRESS LOW BYTE
                ;
                ; GET RECORD TYPE
                ;
        CALL    GETBYT
        JR      C,INTEL5
        JR      NZ,INTEL4       ;END OF FILE RECORD
                ;
                ; READ IN THE DATA
                ;
        LD      B,(IX+0)        ;NUMBER OF DATA BYTES
        LD      H,(IX+2)        ;LOAD ADDRESS HIGH BYTE
        LD      L,(IX+1)        ;LOAD ADDRESS LOW BYTE
                
INTEL2  CALL    GETBYT  ;GET DATA BYTE
        JR      C,INTEL5
        LD      (HL),A  ;STORE DATA BYTE
        INC     HL
        DJNZ    INTEL2  ;LOAD MORE BYTES
                ;
                ; GET CHECKSUM AND COMPARE
                ;
        LD      A,(IX+3)        ;CONVERT CHECKSUM TO
        NEG             ;TWO'S COMPLEMENT
        LD      (IX+4),A        ;SAVE COMPUTED CHECKSUM
        CALL    GETBYT
        JR      C,INTEL5
        LD      (IX+3),A        ;SAVE RECORD CHECKSUM
        CP      (IX+4)  ;COMPARE CHECKSUM
        JR      Z,INTEL1        ;CHECKSUM OK,NEXT RECORD
                ;
                ; CHECKSUM ERROR
                ;
INTEL3  JP      BLKMV1
                ;
                ; END OF FILE RECORD
                ;
INTEL4  LD      A,(IX+3)        ;CONVERT CHECKSUM TO
        NEG             ;TWO'S COMPLEMENT
        LD      (IX+4),A        ;SAVE COMPUTED CHECKSUM
        CALL    GETBYT
        JR      C,INTEL5
        LD      (IX+3),A        ;SAVE EOF CHECKSUM
        CP      (IX+4)  ;COMPARE CHECKSUM
        JR      NZ,INTEL3       ;CHECKSUM ERROR
                ;
                ; LOAD COMPLETE
                ;
        LD      HL,0039H        ;SHOW C FOR COMPLETE
        JP      BLKMV2
                ;
                ; INTERRUPTED BY KEYBOARD
                ;
INTEL5  LD      HL,0077H        ;SHOW A FOR ABORT
        JP      BLKMV2
                ;--------------------------
                ; GET BYTE FROM SERIAL PORT
                ;--------------------------
GETBYT  PUSH    BC
        CALL    RXDATA
        JR      C,GETBT3
        BIT     6,A
        JR      Z,GETBT1
        ADD     A,09H
GETBT1  AND     0FH
        SLA     A
        SLA     A
        SLA     A
        SLA     A
        LD      C,A
                ;
                ; GET LOW NYBBLE
                ;
        CALL    RXDATA
        JR      C,GETBT3
        BIT     6,A
        JR      Z,GETBT2
        ADD     A,09H
GETBT2  AND     0FH
        OR      C
        LD      B,A
        ADD     A,(IX+3)
        LD      (IX+3),A        ;ADD TO CHECKSUM
        LD      A,B
        AND     A       ;CLEAR CARRY
GETBT3  POP     BC
        RET
                ;-------------------------------
                ; CONVERT ASCII CHARACTER TO HEX
                ;-------------------------------
                ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
                ;ENTRY : A= ASCII 0-9,A-F
                ;EXIT  : A= HEX 0-F IN LSN
                ; A AND F REGISTERS MODIFIED
                ;
ASCHEX  BIT     6,A
        JR      Z,ASCHX1
        ADD     A,09H
ASCHX1  AND     0FH
        RET
                ;------------------------
                ; SERIAL TRANSMIT ROUTINE
                ;------------------------
                ;TRANSMIT BYTE SERIALLY ON DOUT
                ;
                ; ENTRY : A = BYTE TO TRANSMIT
                ;  EXIT : NO REGISTERS MODIFIED
                ;
TXDATA  PUSH    AF
        PUSH    BC
        PUSH    HL
        LD      HL,(BAUD)
        LD      C,A
                ;
                ; TRANSMIT START BIT
                ;
        XOR     A
        OUT     (SCAN),A
        CALL    BITIME
                ;
                ; TRANSMIT DATA
                ;
        LD      B,08H
        RRC     C
NXTBIT  RRC     C       ;SHIFT BITS TO D6,
        LD      A,C     ;LSB FIRST AND OUTPUT
        AND     40H     ;THEM FOR ONE BIT TIME.
        OUT     (SCAN),A
        CALL    BITIME
        DJNZ    NXTBIT
                ;
                ; SEND STOP BITS
                ;
        LD      A,40H
        OUT     (SCAN),A
        CALL    BITIME
        CALL    BITIME
        POP     HL
        POP     BC
        POP     AF
        RET
                ;-----------------------
                ; SERIAL RECEIVE ROUTINE
                ;-----------------------
                ;RECEIVE SERIAL BYTE FROM DIN
                ;
                ; ENTRY : NONE
                ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                ;         A= KEYBUF, CARRY SET IF KEY PRESSED
                ; REGISTERS MODIFIED A AND F
                ;
RXDATA  PUSH    BC
 07EB E5                PUSH    HL
                ;
                ; WAIT FOR START BIT OR EXIT IF KEY PRESS.
                ;
 07EC DB86      RXDAT1  IN      A,(KEYBUF)
 07EE CB6F              BIT     5,A
 07F0 37                SCF
 07F1 2026              JR      NZ,RXDAT3       ;KEY PRESS SO EXIT
 07F3 CB7F              BIT     7,A
 07F5 20F5              JR      NZ,RXDAT1       ;NO START BIT
                ;
                ; DETECTED START BIT
                ;
 07F7 2AC03F            LD      HL,(BAUD)
 07FA CB3C              SRL     H
 07FC CB1D              RR      L       ;DELAY FOR HALF BIT TIME
 07FE CD1C08            CALL    BITIME
 0801 DB86              IN      A,(KEYBUF)
 0803 CB7F              BIT     7,A
 0805 20E5              JR      NZ,RXDAT1       ;START BIT NOT VALID
                ;
                ; DETECTED VALID START BIT,READ IN DATA
                ;
 0807 0608              LD      B,08H
 0809 2AC03F    RXDAT2  LD      HL,(BAUD)
 080C CD1C08            CALL    BITIME  ;DELAY ONE BIT TIME
 080F DB86              IN      A,(KEYBUF)
 0811 CB17              RL      A
 0813 CB19              RR      C       ;SHIFT BIT INTO DATA REG
 0815 10F2              DJNZ    RXDAT2
 0817 79                LD      A,C
 0818 B7                OR      A       ;CLEAR CARRY FLAG
 0819 E1        RXDAT3  POP     HL
 081A C1                POP     BC
 081B C9                RET
                ;---------------
                ; BIT TIME DELAY
                ;---------------
                ;DELAY FOR ONE SERIAL BIT TIME
                ;ENTRY : HL = DELAY TIME
                ; NO REGISTERS MODIFIED
                ;
 081C E5        BITIME  PUSH    HL
 081D D5                PUSH    DE
 081E 110100            LD      DE,0001H
 0821 ED52      BITIM1  SBC     HL,DE
 0823 D22108            JP      NC,BITIM1
 0826 D1                POP     DE
 0827 E1                POP     HL
 0828 C9                RET
                ;-----------------------------
                ; FUNCTION 2 - ENTER ADDRESS 1
                ;-----------------------------
 0829 CD4305    ADDRA   CALL    BEEP
 082C 2ADA3F            LD      HL,(ADRESS)     ;COPY CURRENT
 082F 22C83F            LD      (BLKSRT),HL     ;ADDRESS AS START
 0832 210039            LD      HL,3900H        ;ADDRESS
 0835 CD9508            CALL    SDELAY
 0838 C3B806            JP      CANCL1
                ;-----------------------------
                ; FUNCTION 3 - ENTER ADDRESS 2
                ;-----------------------------
 083B CD4305    ADDRB   CALL    BEEP
 083E 2ADA3F            LD      HL,(ADRESS)     ;COPY CURRENT
 0841 22CA3F            LD      (BLKEND),HL     ;ADDRESS AS END
 0844 210F00            LD      HL,000FH        ;ADDRESS
 0847 CD9508            CALL    SDELAY
 084A C3B806            JP      CANCL1
                ;------------------------
                ; FUNCTION 4 - BLOCK MOVE
                ;------------------------
 084D CD4305    BLKMVE  CALL    BEEP
 0850 2ADA3F            LD      HL,(ADRESS)     ;COPY CURRENT
 0853 22CC3F            LD      (BLKDST),HL     ;ADDRESS AS
 0856 210F39            LD      HL,390FH        ;DESTINATION
 0859 CD9508            CALL    SDELAY
                ;
                ; CALCULATE NUMBER OF BYTES TO MOVE
                ;
 085C 2ACA3F            LD      HL,(BLKEND)
 085F ED5BC83F          LD      DE,(BLKSRT)
 0863 A7                AND     A
 0864 ED52              SBC     HL,DE
 0866 23                INC     HL      ;MAKE MOVE INCLUSIVE
 0867 22C63F            LD      (COUNT),HL
 086A 3015              JR      NC,BLKMV3       ;IF OK MOVE BLOCK
                ;
                ; SHOW ERROR
                ;
 086C 217900    BLKMV1  LD      HL,0079H        ;SHOW ERROR
 086F CD4305    BLKMV2  CALL    BEEP
 0872 22D03F            LD      (DISBUF),HL     ;AND WAIT
 0875 CD0A04            CALL    SKEYIN  ;FOR KEYPRESS
 0878 CD4305            CALL    BEEP
 087B CD1604            CALL    SKEYRL
 087E C3B806            JP      CANCL1
                ;
                ; MOVE BLOCK
                ;
 0881 CD8708    BLKMV3  CALL    MOVE
 0884 C3B806            JP      CANCL1
                ;-----------
                ; BLOCK MOVE
                ;-----------
 0887 ED4BC63F  MOVE    LD      BC,(COUNT)
 088B 2AC83F            LD      HL,(BLKSRT)     ;START ADDR
 088E ED5BCC3F          LD      DE,(BLKDST)     ;DESTINATION ADDR
 0892 EDB0              LDIR
 0894 C9                RET
                ;-------------------------------
                ; SCAN DISPLAY UNTIL KEY RELEASE
                ;-------------------------------
 0895 22D03F    SDELAY  LD      (DISBUF),HL     ;SHOW HL
 0898 06FF              LD      B,255   ;IN DATA DISPLAYS
 089A CDD003    SDELY1  CALL    SCAND   ;UNTIL KEY
 089D 10FB              DJNZ SDELY1     ;IS RELEASED
 089F CD1604            CALL    SKEYRL
 08A2 C9                RET
                ;---------------------------
                ;FUNCTION 5 - BLOCK CHECKSUM
                ;---------------------------
 08A3 CD4305    BLKSUM  CALL    BEEP
 08A6 216D39            LD      HL,396DH
 08A9 CD9508            CALL    SDELAY  ;SHOW PROMPT
 08AC ED5BC83F          LD      DE,(BLKSRT)
 08B0 2ACA3F            LD      HL,(BLKEND)
 08B3 A7                AND     A
 08B4 ED52              SBC     HL,DE
 08B6 23                INC     HL      ;MAKE CHECKSUM INCLUSIVE
 08B7 22C63F            LD      (COUNT),HL
 08BA 3003              JR      NC,BLKSM1       ;IF OK SUM BLOCK
                ;
                ; SHOW ERROR
                ;
 08BC C36C08            JP      BLKMV1
                ;
                ; CALCULATE CHECKSUM
                ;
 08BF 2AC83F    BLKSM1  LD      HL,(BLKSRT)
 08C2 ED5BCA3F          LD      DE,(BLKEND)
 08C6 CD5704            CALL    CHKSUM  ;DO THE CHECKSUM,
 08C9 CD9703            CALL    DISBYT  ;DISPLAY
 08CC 2AC63F            LD      HL,(COUNT)      ;NUMBER OF BYTES
 08CF CD8203            CALL    DISADD  ;SUMMED AND
 08D2 CD4305            CALL    BEEP
 08D5 CD0A04            CALL    SKEYIN  ;CHECKSUM UNTIL
 08D8 CD4305            CALL    BEEP    ;A KEY IS PRESSED
 08DB CD1604            CALL    SKEYRL
 08DE C3B806            JP      CANCL1
                ;----------------------------------------
                ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
                ;----------------------------------------
 08E1 CD4305    BRANCH  CALL    BEEP
 08E4 217C50            LD      HL,507CH
 08E7 CD9508            CALL    SDELAY
 08EA 2ADA3F            LD      HL,(ADRESS)     ;GET CURRENT ADDRESS
 08ED ED5BC83F          LD      DE,(BLKSRT)
 08F1 13                INC     DE      ;POINT TO PC+2
 08F2 A7                AND     A
 08F3 ED52              SBC     HL,DE   ;SUBTRACT
                ;
                ;TEST HIGH BYTE OF RESULT TO
                ;DETERMINE IF BACKWARD BRANCH
                ;
 08F5 7C                LD      A,H
 08F6 FEFF              CP      255     ;BACKWARD BRANCH?
 08F8 C20309            JP      NZ,BRNCH1       ;CHECK IF FORWARD
                ;
                ;CHECK IF WE HAVE BRANCHED BEYOND -128
                ;
 08FB 7D                LD      A,L
 08FC CB7F              BIT     7,A
 08FE 200E              JR      NZ,BRNCH2       ;BRANCH IS WITHIN LIMITS
 0900 C36C08            JP      BLKMV1  ;TOO FAR BACK
                ;
                ;TEST HIGH BYTE OF RESULT TO
                ;DETERMINE IF FORWARD BRANCH
                ;
 0903 FE00      BRNCH1  CP      0       ;FORWARD BRANCH?
 0905 C26C08            JP      NZ,BLKMV1       ;TOO FAR IN ANY DIRECTION
                ;
                ; CHECK IF WE HAVE BRANCHED BEYOND +128
                ;
 0908 7D                LD      A,L
 0909 CB7F              BIT     7,A
 090B C26C08            JP      NZ,BLKMV1       ;TOO FAR FORWARD
                ;
                ; WITHIN LIMITS PUT IN RAM
                ; AND SHOW AS CURRENT ADDRESS
                ;
 090E 2AC83F    BRNCH2  LD      HL,(BLKSRT)
 0911 22DA3F            LD      (ADRESS),HL
 0914 77                LD      (HL),A
 0915 C3B806            JP      CANCL1
                ;-----------------------------------------
                ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
                ;-----------------------------------------
 0918 CD4305    TRACE   CALL    BEEP
 091B D387              OUT     (IO7),A ;TOGGLE HARDWARE LATCH
 091D 217000            LD      HL,0070H        ;SHOW T
 0920 CD9508            CALL    SDELAY
 0923 C3B806            JP      CANCL1
                ;-------------------------
                ; FUNCTION 8 - PLAY TUNE 1
                ;-------------------------
 0926 CD4305    PLAY1   CALL    BEEP
 0929 CD2B04            CALL    KEYREL
 092C 216109            LD      HL,TUNE1
 092F CDA604            CALL    MUSIC
 0932 C3B806            JP      CANCL1
                ;-------------------------
                ; FUNCTION 9 - PLAY TUNE 2
                ;-------------------------
 0935 CD4305    PLAY2   CALL    BEEP
 0938 CD2B04            CALL    KEYREL
 093B 21A109            LD      HL,TUNE2
 093E CDA604            CALL    MUSIC
 0941 C3B806            JP      CANCL1
                ;------------------------------
                ; FUNCTION A - PLAY TUNE IN RAM
                ;------------------------------
 0944 CD4305    PLAY3   CALL    BEEP
 0947 CD2B04            CALL    KEYREL
 094A 2ADA3F            LD      HL,(ADRESS)
 094D CDA604            CALL    MUSIC
 0950 C3B806            JP      CANCL1
                ;-----------------------------
                ; FUNCTION B - TOGGLE KEY BEEP
                ;-----------------------------
 0953 CD4305    SWBEEP  CALL    BEEP
 0956 3AD83F            LD      A,(MODE)
 0959 EE40              XOR     40H
 095B 32D83F            LD      (MODE),A
 095E C3B806            JP      CANCL1
                ;
                ; TUNE 1
                ;
 0961 06060A0D  TUNE1   DEFB    06H,06H,0AH,0DH,06H,0DH,0AH,0DH
 0969 12161412          DEFB    12H,16H,14H,12H,0FH,11H,12H,0FH
 0971 0D0D0D0A          DEFB    0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
 0979 0806080A          DEFB    08H,06H,08H,0AH,0FH,0AH,0DH,0FH
 0981 06060A0D          DEFB    06H,06H,0AH,0DH,06H,0DH,0AH,0DH
 0989 12161412          DEFB    12H,16H,14H,12H,0FH,11H,12H,0FH
 0991 0D0D0D0A          DEFB    0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
 0999 0806080A          DEFB    08H,06H,08H,0AH,06H,12H,00H,1EH
                ;
                ; TUNE 2
                ;
 09A1 0B0A080A  TUNE2   DEFB    0BH,0AH,08H,0AH,0AH,0AH,06H,06H
 09A9 060B0A08          DEFB    06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
 09B1 0A0A0B0A          DEFB    0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
 09B9 0606060A          DEFB    06H,06H,06H,0AH,08H,0AH,0DH,0DH
 09C1 0D0D0D00          DEFB    0DH,0DH,0DH,00H,0DH,05H,08H,0BH
 09C9 0B0B0606          DEFB    0BH,0BH,06H,06H,06H,0BH,0AH,08H
 09D1 0A0A0A06          DEFB    0AH,0AH,0AH,06H,06H,06H,0BH,0AH
 09D9 06080808          DEFB    06H,08H,08H,08H,08H,08H,0AH,0BH
 09E1 0A080606          DEFB    0AH,08H,06H,06H,06H,06H,06H,06H
 09E9 0000001E          DEFB    00H,00H,00H,1EH
                ;---------------------------
                ; FUNCTION C - SECRET NUMBER
                ;---------------------------
 09ED CD4305    SECRET  CALL    BEEP    ;WAIT FOR KEY RELEASE
 09F0 CD2B04            CALL    KEYREL  ;AND CLEAR DISPLAY
 09F3 CDFB03            CALL    CLRBUF  ;BUFFER
 09F6 DD21003F          LD      IX,SYSTEM       ;USE IX FOR LOCAL VARIABLES
                ;
                ; SEPARATE NYBBLES IN RANDOM NUMBER
                ;
 09FA CD7704            CALL    RAND
 09FD DD750B            LD      (IX+11),L
 0A00 DD740C            LD      (IX+12),H       ;RANDOM NUMBER
 0A03 DD7E0B            LD      A,(IX+11)       ;SEPARATE THE RANDOM
 0A06 CD5B0B            CALL    SPLIT   ;NUMBER INTO
 0A09 DD7504            LD      (IX+4),L        ;FOUR NYBBLES
 0A0C DD7405            LD      (IX+5),H        ;TO MAKE CHECKING
 0A0F DD7E0C            LD      A,(IX+12)       ;AGAINST THE
 0A12 CD5B0B            CALL    SPLIT   ;GUESS EASIER
 0A15 DD7506            LD      (IX+6),L
 0A18 DD7407            LD      (IX+7),H
 0A1B AF                XOR     A
 0A1C ED47              LD      I,A     ;CLEAR NUMBER OF TRIES
 0A1E 210000            LD      HL,0
 0A21 DD7508            LD      (IX+8),L
 0A24 DD7409            LD      (IX+9),H
 0A27 CD8203            CALL    DISADD  ;AND DISPLAY GUESS
                ;
                ; SCAN THE KEYBOARD
                ;
 0A2A CD0A04    SECRT1  CALL    SKEYIN  ;WAIT FOR KEY
 0A2D 21390A            LD      HL,SECNUM
 0A30 CD3404            CALL    MENU    ;EXECUTE KEY HANDLER
 0A33 CD1604            CALL    SKEYRL  ;WAIT FOR KEY RELEASE
 0A36 C32A0A            JP      SECRT1
                ;
                ; SECRET NUMBER KEY TABLE
                ;
 0A39 12        SECNUM  DEFB    12H
 0A3A 00010203          DEFB    00H,01H,02H,03H,04H,05H,06H,07H
 0A42 08090A0B          DEFB    08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
 0A4A 1011              DEFB    10H,11H
 0A4C 700A700A          DEFW    EDTKEY,EDTKEY,EDTKEY,EDTKEY
 0A54 700A700A          DEFW    EDTKEY,EDTKEY,EDTKEY,EDTKEY
 0A5C 700A700A          DEFW    EDTKEY,EDTKEY,EDTKEY,EDTKEY
 0A64 700A700A          DEFW    EDTKEY,EDTKEY,EDTKEY,EDTKEY
 0A6C 970AA00A          DEFW    ENDKEY,CHKKEY
                ;---------------
                ; EDIT GUESS KEY
                ;---------------
 0A70 F5        EDTKEY  PUSH    AF
 0A71 DD6E08            LD      L,(IX+8)
 0A74 DD6609            LD      H,(IX+9)        ;GET CURRENT GUESS
 0A77 CB25              SLA     L
 0A79 CB14              RL      H       ;AND DO A 16 BIT
 0A7B CB25              SLA     L       ;LEFT SHIFT 4 TIMES
 0A7D CB14              RL      H       ;TO MAKE  ROOM
 0A7F CB25              SLA     L       ;FOR THE NEW KEY
 0A81 CB14              RL      H
 0A83 CB25              SLA     L
 0A85 CB14              RL      H
 0A87 F1                POP     AF
 0A88 B5                OR      L       ;IT IN THE LEAST
 0A89 6F                LD      L,A     ;SIGNIFICANT NYBBLE
 0A8A DD7508            LD      (IX+8),L
 0A8D DD7409            LD      (IX+9),H        ;SAVE GUESS
 0A90 CD8203            CALL    DISADD
 0A93 CD4305            CALL    BEEP
 0A96 C9                RET
                ;----------
                ; QUIT GAME
                ;----------
 0A97 CD4305    ENDKEY  CALL    BEEP    ;WAIT FOR KEY RELEASE
 0A9A CD2B04            CALL    KEYREL  ;AND RETURN TO
 0A9D C36E02            JP      MAIN    ;MONITOR
                ;---------------------------
                ; SEE IF ITS THE RIGHT GUESS
                ;---------------------------
 0AA0 CD4305    CHKKEY  CALL    BEEP
 0AA3 ED57              LD      A,I
 0AA5 3C                INC     A
 0AA6 27                DAA     ;INC BCD NO. OF TRIES
                ;
                ; BRIEFLY SHOW GUESS NO.
                ;
 0AA7 ED47              LD      I,A
 0AA9 CD9703            CALL    DISBYT
 0AAC 06FF              LD      B,255
 0AAE CDD003    CHKKY1  CALL    SCAND
 0AB1 10FB              DJNZ    CHKKY1
                ;
                ; SEPARATE GUESS INTO NYBBLES
                ;
 0AB3 DD7E08            LD      A,(IX+8)        ;GET CURRENT GUESS
 0AB6 CD5B0B            CALL    SPLIT           ;NUMBER INTO
 0AB9 DD7500            LD      (IX+0),L        ;FOUR NYBBLES
 0ABC DD7401            LD      (IX+1),H        ;TO MAKE CHECKING
 0ABF DD7E09            LD      A,(IX+9)        ;AGAINST THE
 0AC2 CD5B0B            CALL    SPLIT   ;GUESS EASIER
 0AC5 DD7502            LD      (IX+2),L
 0AC8 DD7403            LD      (IX+3),H
                ;
                ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
                ;
 0ACB AF                XOR     A
 0ACC DD770A            LD      (IX+10),A       ;CLEAR RESULT
 0ACF 21043F            LD      HL,SYSTEM+4     ;POINT TO RANDOM
 0AD2 11003F            LD      DE,SYSTEM       ;POINT TO GUESS
 0AD5 0604              LD      B,4     ;NUMBER OF DIGITS
 0AD7 7E        CHKKY2  LD      A,(HL)  ;GET RANDOM
 0AD8 EB                EX      DE,HL
 0AD9 BE                CP      (HL)    ;SAME AS GUESS?
 0ADA 2010              JR      NZ,CHKKY4       ;NOT SAME
 0ADC DD7E0A            LD      A,(IX+10)
 0ADF C610              ADD     A,10H   ;RIGHT POSITION
 0AE1 DD770A            LD      (IX+10),A
 0AE4 23        CHKKY3  INC     HL      ;POINT TO NEXT
 0AE5 EB                EX      DE,HL   ;DIGIT POSITION
 0AE6 23                INC     HL      ;AND GO
 0AE7 10EE              DJNZ    CHKKY2  ;CHECK OTHER POSITIONS
 0AE9 C3080B            JP      CHKKY8
                ;
                ; CHECK IF NUMBER IS THERE
                ;
 0AEC C5        CHKKY4  PUSH    BC
 0AED E5                PUSH    HL
 0AEE 0604              LD      B,4     ;CHECK EACH DIGIT
 0AF0 21003F            LD      HL,SYSTEM       ;TO SEE IF THIS
 0AF3 BE        CHKKY5  CP      (HL)    ;NUMBER IS IN
 0AF4 23                INC     HL      ;THE WRONG
 0AF5 200A              JR      NZ,CHKKY6       ;POSITION
 0AF7 DD7E0A            LD      A,(IX+10)       ;AND UPDATE
 0AFA 3C                INC     A       ;THE RESULT
 0AFB DD770A            LD      (IX+10),A
 0AFE C3030B            JP      CHKKY7
 0B01 10F0      CHKKY6  DJNZ    CHKKY5
 0B03 E1        CHKKY7  POP     HL
 0B04 C1                POP     BC
 0B05 C3E40A            JP      CHKKY3  ;CHECK NEXT DIGIT
                ;
                ; CHECK IF CORRECT
                ;
 0B08 DD7E0A    CHKKY8  LD      A,(IX+10)
 0B0B FE40              CP      40H     ;IS IT CORRECT?
 0B0D CA2D0B            JP      Z,CHKKY9        ;YES!
 0B10 DD7E0A            LD      A,(IX+10)       ;NOT CORRECT
 0B13 CD9703            CALL    DISBYT  ;IN DATA DISPLAYS
 0B16 ED57              LD      A,I     ;WAS THAT THE
 0B18 FE20              CP      20H     ;LAST GUESS?
 0B1A C0                RET     NZ      ;NO TRY AGAIN
                ;
                ; RAN OUT OF TRYS
                ;
 0B1B CDFB03            CALL    CLRBUF  ;DISPLAY
 0B1E DD6E0B            LD      L,(IX+11)
 0B21 DD660C            LD      H,(IX+12)       ;THE RANDOM NUMBER
 0B24 CD8203            CALL    DISADD  ;AND PLAY
 0B27 21540B            LD      HL,LOSE ;THE LOSE
 0B2A C33B0B            JP      CHKKYA  ;MUSIC
                ;
                ; GOT THE RIGHT ANSWER
                ;
 0B2D ED57      CHKKY9  LD      A,I     ;DISPLAY HOW MANY
 0B2F CD9703            CALL    DISBYT  ;AND PLAY THE WIN
 0B32 DD6E0B            LD      L,(IX+11)
 0B35 DD660C            LD      H,(IX+12)
 0B38 214B0B            LD      HL,WIN  ;MUSIC
                ;
                ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
                ;
 0B3B CDA604    CHKKYA  CALL    MUSIC   ;PLAY THE MUSIC
 0B3E CD0A04            CALL    SKEYIN  ;WAIT FOR A KEY
 0B41 CD4305            CALL    BEEP
 0B44 CD1604            CALL    SKEYRL  ;WAIT FOR KEY RELEASE
 0B47 E1                POP     HL      ;AND RESTART THE GAME
 0B48 C3ED09            JP      SECRET
                ;
                ; WIN AND LOSE MUSIC
                ;
 0B4B 14121417  WIN     DEFB    14H,12H,14H,17H,17H,12H,14H,10H,1FH
 0B54 01110111  LOSE    DEFB    01H,11H,01H,11H,01H,11H,1FH
                ;-------------------------------
                ; SEPARATE BYTE INTO TWO NYBBLES
                ;-------------------------------
                ;SEPARATES A BYTE INTO TWO
                ;RIGHT JUSTIFIED NYBBLES
                ; ENTRY : A = BYTE TO BE SEPARATED
                ; EXIT  : H = MSN
                ;         L = LSN
                ;
 0B5B F5        SPLIT   PUSH    AF
 0B5C C5                PUSH    BC
 0B5D 47                LD      B,A     ;SAVE BYTE
 0B5E E60F              AND     0FH     ;STRIP BITS LSN
 0B60 6F                LD      L,A     ;RETURN LSN IN L
 0B61 78                LD      A,B
 0B62 CB3F              SRL     A
 0B64 CB3F              SRL     A
 0B66 CB3F              SRL     A       ;MOVE MSN
 0B68 CB3F              SRL     A       ;INTO LSN
 0B6A 67                LD      H,A     ;RETURN MSN IN H
 0B6B C1                POP     BC
 0B6C F1                POP     AF
 0B6D C9                RET
                ;-----------------------------------
                ; FUNCTION D - RELAY BOARD SEQUENCER
                ;-----------------------------------
 0B6E CD4305    RELSQR  CALL    BEEP
 0B71 CD2B04            CALL    KEYREL
 0B74 217D0B            LD      HL,RLTEST       ;POINT TO TEST SEQUENCE
 0B77 CD830B            CALL    RLSTEP
 0B7A C3B806            JP      CANCL1
                ;--------------
                ; TEST SEQUENCE
                ;--------------
 0B7D 5501AA01  RLTEST  DEFB    55H,01H,0AAH,01H,00H,0FFH
                ;----------------
                ; RELAY SEQUENCER
                ;----------------
                ; SEQUENCES RELAYS ON RELAY BOARD
                ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
                ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
                ; OR REPEAT.
                ;  TABLE:
                ;  <BYTE1>,<BYTE2>
                ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
                ;  BYTE2 = FF - REPEAT
                ;          00 - FINISHED
                ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
                ;  EXIT : NONE MODIFIED
                ;
 0B83 F5        RLSTEP  PUSH    AF
 0B84 C5                PUSH    BC
 0B85 D5                PUSH    DE
 0B86 E5                PUSH    HL      ;SAVE REGISTERS
 0B87 E5                PUSH    HL
 0B88 EB                EX      DE,HL   ;GET ADDRESS OF DATA
 0B89 1A        RELSR1  LD      A,(DE)
 0B8A 4F                LD      C,A     ;GET OUTPUT DATA
 0B8B 13                INC     DE
 0B8C 1A                LD      A,(DE)  ;GET TIME DELAY
 0B8D FE00              CP      0
 0B8F 2816              JR      Z,RELSR4        ;END OF SEQUENCE
 0B91 FEFF              CP      255
 0B93 280D              JR      Z,RELSR3        ;REPEAT SEQUENCE
 0B95 47                LD      B,A
 0B96 79                LD      A,C
 0B97 D381              OUT     (IO1),A
 0B99 13                INC     DE
 0B9A CDB10B    RELSR2  CALL    DELONE  ;1 SEC DELAY
 0B9D 10FB              DJNZ    RELSR2  ;MORE SECONDS TO GO
 0B9F C3890B            JP      RELSR1
                ;
                ; REPEAT
                ;
 0BA2 D1        RELSR3  POP     DE      ;GET START ADDRESS
 0BA3 D5                PUSH    DE      ;SAVE FOR LATER
 0BA4 C3890B            JP      RELSR1
                ;
                ; FINISHED
                ;
 0BA7 3E00      RELSR4  LD      A,00H
 0BA9 D381              OUT     (IO1),A ;CLEAR OUTPUT REG
 0BAB E1                POP     HL
 0BAC E1                POP     HL
 0BAD D1                POP     DE
 0BAE C1                POP     BC
 0BAF F1                POP     AF
 0BB0 C9                RET
                ;-----------------
                ; ONE SECOND DELAY
                ;-----------------
                ;
                ; ENTRY : NONE
                ; EXIT : FLAG REGISTER MODIFIED
                ;
 0BB1 C5        DELONE  PUSH    BC
 0BB2 D5                PUSH    DE
 0BB3 E5                PUSH    HL
 0BB4 110100            LD      DE,0001H
 0BB7 217008            LD      HL,0870H
 0BBA 0692      DELON1  LD      B,92H
 0BBC 10FE      DELON2  DJNZ    DELON2  ;INNER LOOP
 0BBE ED52              SBC     HL,DE
 0BC0 D2BA0B            JP      NC,DELON1       ;OUTER LOOP
 0BC3 E1                POP     HL
 0BC4 D1                POP     DE
 0BC5 C1                POP     BC
 0BC6 C9                RET
                ;--------------------------
                ; FUNCTION E - KALEIDOSCOPE
                ;--------------------------
 0BC7 CD4305    SCOPE   CALL    BEEP
 0BCA CD2B04            CALL    KEYREL
 0BCD CD7704            CALL    RAND    ;GENERATE RANDOM
 0BD0 EB                EX      DE,HL
 0BD1 21003F            LD      HL,SYSTEM       ;NUMBER AND SET UP
 0BD4 7B                LD      A,E     ;THE FIRST QUADRANT
 0BD5 CD4C0C            CALL    SEED    ;WITH A RANDOM BIT
 0BD8 7A                LD      A,D     ;PATTERN
 0BD9 CD4C0C            CALL    SEED
                ;
                ; GENERATE MIRROR IMAGES
                ;
 0BDC 0604      SCOPE2  LD      B,04H
 0BDE 21003F            LD      HL,SYSTEM
 0BE1 11073F            LD      DE,SYSTEM+7
 0BE4 7E        SCOPE3  LD      A,(HL)  ;MIRROR THE FIRST
 0BE5 12                LD      (DE),A  ;QUADRANT INTO
 0BE6 23                INC     HL      ;THE FOURTH
 0BE7 1B                DEC     DE      ;QUADRANT
 0BE8 10FA              DJNZ    SCOPE3
                ;
                ; MIRROR ACROSS CENTRE OF DISPLAY
                ;
 0BEA 0608              LD      B,8     ;MIRROR THE FIRST
 0BEC 21003F            LD      HL,SYSTEM       ;AND FOURTH QUADRANT
 0BEF 7E                LD      A,(HL)  ;ACROSS THE CENTRE
 0BF0 E60F              AND     0FH     ;OF THE DISPLAY
 0BF2 77                LD      (HL),A  ;INTO THE SECOND
 0BF3 CB46      SCOPE4  BIT     0,(HL)  ;AND THIRD QUADRANTS.
 0BF5 CAFA0B            JP      Z,SCOPE5        ;CHECKING IF THE
 0BF8 CBFE              SET     7,(HL)  ;BITS IN THE LSN ARE
 0BFA CB4E      SCOPE5  BIT     1,(HL)  ;SET, AND SETTING THE
 0BFC CA010C            JP      Z,SCOPE6        ;CORRESPONDING
 0BFF CBF6              SET     6,(HL)  ;MIRROR IMAGE
 0C01 CB56      SCOPE6  BIT     2,(HL)  ;BIT IN THE MSN
 0C03 CA080C            JP      Z,SCOPE7        ;IF THEY ARE.
 0C06 CBEE              SET     5,(HL)  ;DO THIS FOR
 0C08 CB5E      SCOPE7  BIT     3,(HL)  ;THE EIGHT ROWS
 0C0A CA0F0C            JP      Z,SCOPE8        ;OF DATA BYTES
 0C0D CBE6              SET     4,(HL)  ;IN THE DISPLAY
 0C0F 23        SCOPE8  INC     HL
 0C10 10E1              DJNZ    SCOPE4  ;MORE ROWS TO DO
                ;
                ; DISPLAY RANDOM BIT PATTERN
                ;
 0C12 110100            LD      DE,0001H        ;SCAN THE DISPLAY
 0C15 CD7704            CALL    RAND    ;A RANDOM
 0C18 7C                LD      A,H     ;TIME
 0C19 E607              AND     7       ;NOT GREATER THAN
 0C1B F601              OR      1       ;NOT LESS THAN
 0C1D 67                LD      H,A
 0C1E E5        SCOPE9  PUSH    HL
 0C1F 21003F            LD      HL,SYSTEM
 0C22 CD5B0C            CALL    SKATE   ;SCAN 8X8
 0C25 E1                POP     HL
 0C26 ED52              SBC     HL,DE
 0C28 C21E0C            JP      NZ,SCOPE9
                ;
                ; MANIPULATE BITS FOR NEXT IMAGE
                ;
 0C2B 21003F    SCOPEA  LD      HL,SYSTEM
 0C2E 3E05              LD      A,5
 0C30 86                ADD     A,(HL)
 0C31 E60F              AND     0FH
 0C33 77                LD      (HL),A  ;ADD 5 TO FIRST LSN
 0C34 23                INC     HL
 0C35 3E03              LD      A,03H
 0C37 86                ADD     A,(HL)
 0C38 E60F              AND     0FH
 0C3A 77                LD      (HL),A  ;ADD 3 TO SECOND LSN
 0C3B 23                INC     HL
 0C3C 3E01              LD      A,01H
 0C3E 86                ADD     A,(HL)
 0C3F E60F              AND     0FH
 0C41 77                LD      (HL),A  ;ADD 1 TO THIRD LSN
 0C42 23                INC     HL
 0C43 3E07              LD      A,07H
 0C45 86                ADD     A,(HL)
 0C46 E60F              AND     0FH
 0C48 77                LD      (HL),A  ;ADD 15 TO FOURTH LSN
 0C49 C3DC0B            JP      SCOPE2  ;MIRROR BIT PATTERN
                ;
                ; SEED THE FIRST QUADRANT WITH RANDOM BITS
                ;
 0C4C 47        SEED    LD      B,A     ;PUT THE
 0C4D E60F              AND     0FH     ;RANDOM NUMBER
 0C4F 77                LD      (HL),A  ;INTO THE
 0C50 23                INC     HL      ;FIRST QUADRANT
 0C51 78                LD      A,B     ;OF THE
 0C52 E6F0              AND     240     ;DISPLAY
 0C54 1F                RRA
 0C55 1F                RRA
 0C56 1F                RRA
 0C57 1F                RRA
 0C58 77                LD      (HL),A
 0C59 23                INC     HL
 0C5A C9                RET
                ;-----------------
                ; SCAN 8X8 DISPLAY
                ;-----------------
                ;PUT THE 8 RAM LOCATIONS POINTED TO
                ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
                ;ON TOP ROW.
                ;  ROUTINE PERIOD IS 500uS
                ;  PULSE WIDTH 15uS  GIVES 3% DUTY
                ;
                ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
                ;       EXIT : NO REGISTERS MODIFIED
                ;
 0C5B F5        SKATE   PUSH    AF
 0C5C C5                PUSH    BC
 0C5D E5                PUSH    HL      ;SAVE REGISTERS
 0C5E 0E80              LD      C,80H
 0C60 7E        SKATE1  LD      A,(HL)
 0C61 D380              OUT     (IO0),A ;OUTPUT X
 0C63 79                LD      A,C
 0C64 D382              OUT     (IO2),A ;OUTPUT Y
 0C66 0602              LD      B,02H
 0C68 10FE      SKATE2  DJNZ    SKATE2  ;ON TIME DELAY
 0C6A AF                XOR     A
 0C6B D380              OUT     (IO0),A
 0C6D D382              OUT     (IO2),A ;CLEAR DISPLAY LATCHES
 0C6F 0608              LD      B,08H
 0C71 10FE      SKATE3  DJNZ    SKATE3  ;OFF TIME DELAY
 0C73 23                INC     HL
 0C74 CB09              RRC     C
 0C76 30E8              JR      NC,SKATE1       ;MORE TO OUTPUT
 0C78 E1                POP     HL
 0C79 C1                POP     BC
 0C7A F1                POP     AF
 0C7B C9                RET
                ;----------------------------
                ; FUNCTION F - CLOCK CALENDAR
                ;----------------------------
 0C7C CD4305    TIME    CALL    BEEP
 0C7F CD2B04            CALL    KEYREL  ;WAIT FOR KEY RELEASE
 0C82 DD21003F          LD      IX,SYSTEM       ;USE IX FOR TEMP VARIABLES
 0C86 3AD63F            LD      A,(ONTIM)
 0C89 DD7700            LD      (IX+0),A        ;SAVE DISPLAY SCAN DELAY
 0C8C 3E60              LD      A,60H
 0C8E 32D63F            LD      (ONTIM),A       ;USE NEW DELAY
 0C91 DD7701            LD      (IX+1),A        ;START IN TIME MODE
                ;
                ; DISPLAY TIME,CHECK FOR KEY
                ;
 0C94 CDE90D    TIME1   CALL    RWATCH  ;READ THE CLOCK/CALENDAR
 0C97 CDD30C            CALL    UPDBUF  ;UPDATE THE DISPLAY BUFFER
 0C9A CDD003            CALL    SCAND
 0C9D DB86              IN      A,(KEYBUF)
 0C9F CB6F              BIT     5,A
 0CA1 28F1              JR      Z,TIME1 ;NO KEY KEEP LOOKING
 0CA3 E61F              AND     1FH
 0CA5 21AD0C            LD      HL,TIMKEY
 0CA8 CD3404            CALL    MENU
 0CAB 18E7              JR      TIME1
                
 0CAD 04        TIMKEY  DEFB    4
 0CAE 10111213          DEFB    10H,11H,12H,13H
 0CB2 BA0C4B0D          DEFW    CLKEXT,SETCLK,CALKEY,CALKEY
                ;--------------------
                ; EXIT CLOCK CALENDAR
                ;--------------------
 0CBA E1        CLKEXT  POP     HL      ;REMOVE RETURN
 0CBB DD7E00            LD      A,(IX+0)
 0CBE 32D63F            LD      (ONTIM),A       ;RESTORE DELAY TIME
 0CC1 C3B506            JP      CANCEL
                ;--------------------
                ; TOGGLE DISPLAY MODE
                ;--------------------
 0CC4 CD4305    CALKEY  CALL    BEEP
 0CC7 CD2B04            CALL    KEYREL
 0CCA DD7E01            LD      A,(IX+1)
 0CCD EE80              XOR     80H     ;TOGGLE DISPLAY
 0CCF DD7701            LD      (IX+1),A
 0CD2 C9                RET
                ;----------------------
                ; UPDATE DISPLAY BUFFER
                ;----------------------
 0CD3 DDCB017E  UPDBUF  BIT     7,(IX+1)        ;WHICH DISPLAY MODE?
 0CD7 2022              JR      NZ,UPDBF2       ;CALENDAR DISPLAY
                ;
                ; TIME DISPLAY
                ;
 0CD9 3AB93F    UPDBF1  LD      A,(SWREG1)
 0CDC CDA003            CALL    CONBYT
 0CDF CBFD              SET     7,L     ;SET DECIMAL POINT
 0CE1 22D03F            LD      (DISBUF),HL     ;SHOW SECONDS (0-59)
 0CE4 3ABA3F            LD      A,(SWREG2)
 0CE7 CDA003            CALL    CONBYT
 0CEA CBFD              SET     7,L     ;SET DECIMAL POINT
 0CEC 22D23F            LD      (DISBUF+2),HL   ;SHOW MINUTES (0-59)
 0CEF 3ABB3F            LD      A,(SWREG3)
 0CF2 CDA003            CALL    CONBYT
 0CF5 CBFD              SET     7,L     ;SET DECIMAL POINT
 0CF7 22D43F            LD      (DISBUF+4),HL   ;SHOW HOURS (0-23)
 0CFA C9                RET
                ;
                ; CALENDAR DISPLAY
                ;
 0CFB 3ABF3F    UPDBF2  LD      A,(SWREG7)
 0CFE CDA003            CALL    CONBYT
 0D01 22D03F            LD      (DISBUF),HL     ;SHOW YEAR (0-99)
                ;
                ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
                ;
 0D04 21B63F            LD      HL,CALMDE
 0D07 CB7E              BIT     7,(HL)
 0D09 2014              JR      NZ,UPDBF3       ;MM/DD/YY MODE
                ;
                ; DD/MM/YY MODE
                ;
 0D0B 3ABE3F            LD      A,(SWREG6)
 0D0E CDA003            CALL    CONBYT
 0D11 22D23F            LD      (DISBUF+2),HL   ;SHOW MONTH (1-12)
 0D14 3ABD3F            LD      A,(SWREG5)
 0D17 CDA003            CALL    CONBYT
 0D1A 22D43F            LD      (DISBUF+4),HL   ;SHOW DATE (1-31)
 0D1D 1812              JR      UPDBF4
                ;
                ; MM/DD/YY MODE
                ;
 0D1F 3ABE3F    UPDBF3  LD      A,(SWREG6)
 0D22 CDA003            CALL    CONBYT
 0D25 22D43F            LD      (DISBUF+4),HL   ;SHOW MONTH (1-12)
 0D28 3ABD3F            LD      A,(SWREG5)
 0D2B CDA003            CALL    CONBYT
 0D2E 22D23F            LD      (DISBUF+2),HL   ;SHOW DATE (1-31)
                ;
                ; SHOW DAY
                ;
 0D31 3ABC3F    UPDBF4  LD      A,(SWREG4)      ;GET DAY REG
 0D34 E607              AND     07H
 0D36 2812              JR      Z,UPDBF5        ;ZERO IS ILLEGAL
 0D38 FE07              CP      07H
 0D3A 280E              JR      Z,UPDBF5        ;DON'T SHOW SATURDAY
 0D3C 2F                CPL     ;WORK OUT
 0D3D D601              SUB     01H     ;WHICH DECIMAL POINT
 0D3F E607              AND     07H     ;TO LIGHT
 0D41 21D03F            LD      HL,DISBUF       ;ADDING THE DAY
 0D44 0600              LD      B,00H   ;TO A DISPLAY
 0D46 4F                LD      C,A     ;BUFFER INDEX
 0D47 09                ADD     HL,BC   ;AND SETTING THE
 0D48 CBFE              SET     7,(HL)  ;DECIMAL POINT
 0D4A C9        UPDBF5  RET     ;IN THAT DISPLAY
                ;--------------
                ; SET TIME/DATE
                ;--------------
 0D4B CD4305    SETCLK  CALL    BEEP
 0D4E CD2B04            CALL    KEYREL
                ;
                ; EDIT THE DISPLAY BUFFER
                ;
 0D51 CDD30C    SETCK1  CALL    UPDBUF  ;UPDATE DISPLAY BUFFER
 0D54 CD0A04            CALL    SKEYIN
 0D57 CD2B04            CALL    KEYREL
 0D5A FE10              CP      10H     ;FN KEY EXITS (NO CHANGE)
 0D5C C8                RET     Z
 0D5D FE11              CP      11H     ;AD KEY SETS CLOCK/CALENDAR
 0D5F 286E              JR      Z,SETCK8
 0D61 FE12              CP      12H
 0D63 283D              JR      Z,SETCK4        ;PLUS KEY
 0D65 FE13              CP      13H
 0D67 284F              JR      Z,SETCK6        ;MINUS KEY
 0D69 FE0A              CP      0AH     ;NO A-F KEYS
 0D6B 30E4              JR      NC,SETCK1
                ;
                ; IS IT SET CLOCK OR SET CALENDAR?
                ;
 0D6D DDCB017E          BIT     7,(IX+1)
 0D71 200D              JR      NZ,SETCK2
                ;
                ; SET CLOCK DISPLAY
                ;
 0D73 21B93F            LD      HL,SWREG1
 0D76 ED6F              RLD     ;MOVE THE NEW KEY
 0D78 23                INC     HL      ;INTO THE CLOCK BUFFER
 0D79 ED6F              RLD
 0D7B 23                INC     HL
 0D7C ED6F              RLD
 0D7E 18D1              JR      SETCK1
                ;
                ; SET CALENDAR DISPLAY
                ;
 0D80 21B63F    SETCK2  LD      HL,CALMDE
 0D83 CB7E              BIT     7,(HL)
 0D85 200D              JR      NZ,SETCK3       ;MM/DD/YY MODE
                ;
                ; SET CALENDAR AS DD/MM/YY
                ;
 0D87 21BF3F            LD      HL,SWREG7
 0D8A ED6F              RLD     ;MOVE THE NEW KEY
 0D8C 2B                DEC     HL      ;INTO THE CAL BUFFER
 0D8D ED6F              RLD
 0D8F 2B                DEC     HL
 0D90 ED6F              RLD
 0D92 18BD              JR      SETCK1
                ;
                ; SET CALENDAR AS MM/DD/YY
                ;
 0D94 21BF3F    SETCK3  LD      HL,SWREG7
 0D97 ED6F              RLD     ;MOVE THE NEW KEY
 0D99 2B                DEC     HL      ;INTO THE CAL BUFFER
 0D9A 2B                DEC     HL
 0D9B ED6F              RLD
 0D9D 23                INC     HL
 0D9E ED6F              RLD
 0DA0 18AF              JR      SETCK1
                ;
                ; INC DAY
                ;
 0DA2 DDCB017E  SETCK4  BIT     7,(IX+1)
 0DA6 28A9              JR      Z,SETCK1
 0DA8 3ABC3F            LD      A,(SWREG4)
 0DAB FE07              CP      07H     ;IS THE DAY SUNDAY?
 0DAD 2002              JR      NZ,SETCK5
 0DAF 3E00              LD      A,00H   ;SET MONDAY
 0DB1 3C        SETCK5  INC     A       ;DAY=DAY+1
 0DB2 32BC3F            LD      (SWREG4),A
 0DB5 C3510D            JP      SETCK1
                ;
                ; DEC DAY
                ;
 0DB8 DDCB017E  SETCK6  BIT     7,(IX+1)
 0DBC CA510D            JP      Z,SETCK1
 0DBF 3ABC3F            LD      A,(SWREG4)
 0DC2 FE01              CP      01H     ;IS THE DAY MONDAY?
 0DC4 2002              JR      NZ,SETCK7
 0DC6 3E08              LD      A,08H   ;SET SUNDAY
 0DC8 3D        SETCK7  DEC     A       ;DAY=DAY-1
 0DC9 32BC3F            LD      (SWREG4),A
 0DCC C3510D            JP      SETCK1
                ;
                ; SET THE CLOCK/CALENDAR WITH NEW DATA
                ;
 0DCF CD4305    SETCK8  CALL    BEEP
 0DD2 CD2B04            CALL    KEYREL
 0DD5 3ABB3F            LD      A,(SWREG3)
 0DD8 E63F              AND     3FH     ;24 HOUR MODE
 0DDA 32BB3F            LD      (SWREG3),A
 0DDD 3ABC3F            LD      A,(SWREG4)
 0DE0 E607              AND     07H     ;OSC ON,RST ENABLED
 0DE2 32BC3F            LD      (SWREG4),A
 0DE5 CD730E            CALL    WWATCH  ;WRITE CHANGES
 0DE8 C9                RET
                ;---------------------
                ; READ FROM SMARTWATCH
                ;---------------------
                ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
                ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
                ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
                ; OR WRITTEN TO WHILE WATCH IS ENABLED.
                ;
                ;  ENTRY : NONE
                ;  EXIT  : NO WORKING REGISTERS MODIFIED
                ;          (ALTERNATE SET MODIFIED)
                ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
                ;
                ;
                ; ENABLE SMARTWATCH
                ;
 0DE9 F5        RWATCH  PUSH    AF
 0DEA C5                PUSH    BC
 0DEB D5                PUSH    DE
 0DEC E5                PUSH    HL
 0DED 3AFF3F            LD      A,(DALLAS)      ;INITIATE PATTERN
 0DF0 21330E            LD      HL,PATERN       ;WRITE D0 OF ALL THE BYTES
 0DF3 0640              LD      B,64    ;IN THE TABLE TO THE RAM TO
 0DF5 7E        RWACH1  LD      A,(HL)  ;ENABLE THE SMARTWATCH
 0DF6 32FF3F            LD      (DALLAS),A
 0DF9 23                INC     HL
 0DFA 10F9              DJNZ    RWACH1
                ;
                ; READ DATA FROM WATCH
                ;
 0DFC 0620              LD      B,32
 0DFE 3AFF3F    RWACH2  LD      A,(DALLAS)      ;SHIFT THE FIRST 32 BITS
 0E01 CB3F              SRL     A       ;INTO THE 16 BIT REGISTERS
 0E03 CB1A              RR      D       ;DE AND HL
 0E05 CB1B              RR      E       ;THEN EXCHANGE THEM WITH
 0E07 CB1C              RR      H       ;THE ALTERNATE PAIR
 0E09 CB1D              RR      L
 0E0B 10F1              DJNZ    RWACH2
 0E0D D9                EXX
 0E0E 0620              LD      B,32
 0E10 3AFF3F    RWACH3  LD      A,(DALLAS)      ;NOW SHIFT THE LAST 32 BITS
 0E13 CB3F              SRL     A       ;INTO THE SAME 16 BIT REGISTERS
 0E15 CB1A              RR      D
 0E17 CB1B              RR      E
 0E19 CB1C              RR      H
 0E1B CB1D              RR      L
 0E1D 10F1              DJNZ    RWACH3
                ;
                ; SAVE IN WATCH REGISTERS
                ;
 0E1F 22BC3F            LD      (SWREG4),HL     ;SMARTWATCH READ IS COMPLETE
 0E22 ED53BE3F          LD      (SWREG6),DE     ;GET THE DATA
 0E26 D9                EXX
 0E27 22B83F            LD      (SWREG0),HL
 0E2A ED53BA3F          LD      (SWREG2),DE
 0E2E E1                POP     HL
 0E2F D1                POP     DE
 0E30 C1                POP     BC
 0E31 F1                POP     AF
 0E32 C9                RET
                ;
                ; SMARTWATCH ACCESS PATTERN
                ;
 0E33 C5E271B8  PATERN  DEFB    0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
 0E3B 3A1D8E47          DEFB    3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
 0E43 A3D1E874          DEFB    0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
 0E4B 5C2E178B          DEFB    5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
 0E53 C5E271B8          DEFB    0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
 0E5B 3A1D8E47          DEFB    3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
 0E63 A3D1E874          DEFB    0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
 0E6B 5C2E178B          DEFB    5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
                ;--------------------
                ; WRITE TO SMARTWATCH
                ;--------------------
                ;
                ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
                ; IT USING BIT MANIPULATION.
                ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
                ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
                ; SMARTWATCH IS ENABLED.
                ;
                ; ENTRY : NONE
                ; THE DATA TO WRITE TO THE SMARTWATCH
                ; MUST BE IN SWREG0 - SWREG7
                ;  EXIT : NO WORKING REGISTERS MODIFIED
                ;  (ALTERNATE SET MODIFIED)
                ; GET DATA TO WRITE TO WATCH
                ;
 0E73 F5        WWATCH  PUSH    AF
 0E74 C5                PUSH    BC
 0E75 D5                PUSH    DE
 0E76 E5                PUSH    HL
 0E77 2ABC3F            LD      HL,(SWREG4)     ;SET UP THE
 0E7A ED5BBE3F          LD      DE,(SWREG6)     ;16 BIT REGISTERS
 0E7E D9                EXX
 0E7F 2AB83F            LD      HL,(SWREG0)     ;WITH THE DATA TO BE
 0E82 ED5BBA3F          LD      DE,(SWREG2)     ;WRITTEN TO THE SMARTWATCH
                ;
                ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
                ;
 0E86 3AFF3F            LD      A,(DALLAS)      ;INITIATE PATTERN
 0E89 3EC5              LD      A,0C5H
 0E8B 0E80              LD      C,80H   ;NUMBER OF BYTES
 0E8D 0680      WWACH1  LD      B,80H   ;NUMBER OF BITS
 0E8F 32FF3F    WWACH2  LD      (DALLAS),A      ;WRITE TO RAM
 0E92 CB0F              RRC     A
 0E94 CB38              SRL     B
 0E96 30F7              JR      NC,WWACH2       ;MORE BITS
 0E98 CB39              SRL     C
 0E9A 3811              JR      C,WWACH4        ;NO MORE BYTES
 0E9C CB47              BIT     0,A
 0E9E 200A              JR      NZ,WWACH3
 0EA0 CB0F              RRC     A
 0EA2 CB0F              RRC     A
 0EA4 CB0F              RRC     A
 0EA6 CB0F              RRC     A
 0EA8 18E3              JR      WWACH1
 0EAA 2F        WWACH3  CPL
 0EAB 18E0              JR      WWACH1
                ;
                ; WRITE DATA TO WATCH
                ;
 0EAD 0620      WWACH4  LD      B,32    ;SHIFT THE FIRST 32 BITS
 0EAF CB3A      WWACH5  SRL     D       ;OUT OF THE 16 BIT REGISTERS
 0EB1 CB1B              RR      E       ;ONTO D0 AND INTO
 0EB3 CB1C              RR      H       ;THE SMARTWATCH
 0EB5 CB1D              RR      L
 0EB7 17                RLA
 0EB8 32FF3F            LD      (DALLAS),A
 0EBB 10F2              DJNZ    WWACH5
 0EBD D9                EXX     ;RESTORE REGISTERS
 0EBE 0620              LD      B,32    ;GET THE OTHER 32 BITS FROM
 0EC0 CB3A      WWACH6  SRL     D       ;THE ALTERNATE REGISTER SET
 0EC2 CB1B              RR      E       ;AND SHIFT THEM ONTO D0
 0EC4 CB1C              RR      H       ;AND INTO THE SMARTWATCH
 0EC6 CB1D              RR      L
 0EC8 17                RLA
 0EC9 32FF3F            LD      (DALLAS),A
 0ECC 10F2              DJNZ    WWACH6
 0ECE E1                POP     HL
 0ECF D1                POP     DE
 0ED0 C1                POP     BC
 0ED1 F1                POP     AF
 0ED2 C9                RET
                ;-----------------
                ; ONE SECOND DELAY
                ;-----------------
                ; USES SMARTWATCH TO DELAY FOR 1 SECOND
                ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
                ;
                ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
                ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
                ; READS THE SAME AS THE REFERENCE VALUE,
                ; THEN THE ROUTINE RETURNS
                ;
                ; ENTRY : NONE
                ; EXIT : NONE MODIFIED
                ;
 0ED3 F5        ONESEC  PUSH    AF
 0ED4 C5                PUSH    BC
 0ED5 CDE90D            CALL    RWATCH  ;READ WATCH
 0ED8 3AB93F            LD      A,(SWREG1)
 0EDB 47                LD      B,A     ;SAVE REF COUNT
 0EDC CDE90D    ONESC1  CALL    RWATCH
 0EDF 3AB93F            LD      A,(SWREG1)
 0EE2 B8                CP      B       ;SAME AS REF?
 0EE3 CADC0E            JP      Z,ONESC1        ;YES SO WAIT AGAIN
 0EE6 C1                POP     BC
 0EE7 F1                POP     AF
 0EE8 C9                RET
 0000                   END
;---- Symbol Table ----

ADDKEY   0303          CLRBF1   0402          INTEL4   0765
ADDRA    0829          CLRBUF   03FB          INTEL5   0780
ADDRB    083B          CONBYT   03A0          INTELH   0705
ADMODE   0373          CONVHI   03AD          IO0      0080
ADRESS   3FDA          CONVLO   03B1          IO1      0081
AF_REG   3FE2          COUNT    3FC6          IO2      0082
ASCHEX   07B6          DALLAS   3FFF          IO3      0083
ASCHX1   07BC          DECKEY   0334          IO7      0087
B1200    0080          DECKY1   0337          IX_REG   3FEA
B2400    003F          DECKY2   0344          IY_REG   3FEC
B300     0220          DECKY3   0358          KEYBUF   0086
B4800    001B          DECSP1   0670          KEYDEL   3FDC
B9600    000B          DECSTP   0660          KEYIN    0422
BAUD     3FC0          DELON1   0BBA          KEYREL   042B
BC_REG   3FE4          DELON2   0BBC          KEYRL1   042C
BEEP     0543          DELONE   0BB1          KEYTIM   3FC2
BEEP1    0553          DE_REG   3FE6          LENGTH   050A
BEEP2    055A          DISADD   0382          LOSE     0B54
BEEP3    056A          DISBUF   3FD0          MAIN     026E
BITIM1   0821          DISBYT   0397          MAIN1    027F
BITIME   081C          DISPLY   0084          MAIN2    0282
BLKDST   3FCC          DISREG   0599          MENLST   0294
BLKEND   3FCA          EDTKEY   0A70          MENU     0434
BLKMV1   086C          ENDKEY   0A97          MENU1    0442
BLKMV2   086F          FUNFUN   06F6          MENU2    044E
BLKMV3   0881          FUNJMP   3FCE          MODE     3FD8
BLKMVE   084D          FUNKEY   0696          MOVE     0887
BLKSM1   08BF          FUNKY1   069A          MUL16    048F
BLKSRT   3FC8          FUNKY2   06A9          MULT     0498
BLKSUM   08A3          FUNLST   06C2          MULT1    049E
BRANCH   08E1          FUNTBL   3FB4          MUSIC    04A6
BRNCH1   0903          GETBT1   0792          NXTBIT   07D0
BRNCH2   090E          GETBT2   07A8          OFTIM    3FD7
CALKEY   0CC4          GETBT3   07B4          ONESC1   0EDC
CALMDE   3FB6          GETBYT   0786          ONESEC   0ED3
CANCEL   06B5          GOEXEC   06FA          ONTIM    3FD6
CANCL1   06B8          HEXKEY   02D1          PATERN   0E33
CHKKEY   0AA0          HEXKY1   02DC          PAUSE    04B7
CHKKY1   0AAE          HEXKY2   02EA          PC_REG   3FE0
CHKKY2   0AD7          HL_REG   3FE8          PERIOD   04F2
CHKKY3   0AE4          INCKEY   030F          PLAY1    0926
CHKKY4   0AEC          INCKY1   0312          PLAY2    0935
CHKKY5   0AF3          INCKY2   031F          PLAY3    0944
CHKKY6   0B01          INCKY3   0333          RAMEND   3BFF
CHKKY7   0B03          INCSP1   065B          RAMSRT   2000
CHKKY8   0B08          INCSTP   064B          RAMSUM   3FFE
CHKKY9   0B2D          INDEXB   0467          RAND     0477
CHKKYA   0B3B          INDEXW   046E          REGKEY   05F8
CHKSM1   045B          INTEL1   070F          REGNAM   05E8
CHKSUM   0457          INTEL2   0744          REGPNT   3FDE
CLKEXT   0CBA          INTEL3   0762          REGTBL   05AB
RELSQR   0B6E          SCOPE7   0C08          SWREG1   3FB9
RELSR1   0B89          SCOPE8   0C0F          SWREG2   3FBA
RELSR2   0B9A          SCOPE9   0C1E          SWREG3   3FBB
RELSR3   0BA2          SCOPEA   0C2B          SWREG4   3FBC
RELSR4   0BA7          SDELAY   0895          SWREG5   3FBD
RESET    0200          SDELY1   089A          SWREG6   3FBE
RESET1   0214          SECNUM   0A39          SWREG7   3FBF
RETMON   061F          SECRET   09ED          SYSCALL  006B
RETPGM   0629          SECRT1   0A2A          SYSJMP   0100
RLSTEP   0B83          SEED     0C4C          SYSTEM   3F00
RLTEST   0B7D          SEGMNT   03C0          TIME     0C7C
RST08    3FF0          SETCK1   0D51          TIME1    0C94
RST10    3FF2          SETCK2   0D80          TIMKEY   0CAD
RST18    3FF4          SETCK3   0D94          TONE     0523
RST20    3FF6          SETCK4   0DA2          TONE1    052D
RST28    3FF8          SETCK5   0DB1          TONE2    0532
RST30    0030          SETCK6   0DB8          TONE3    0535
RST38    3FFA          SETCK7   0DC8          TRACE    0918
RST66    3FFC          SETCK8   0DCF          TUNE1    0961
RSTVEC   0000          SETCLK   0D4B          TUNE2    09A1
RWACH1   0DF5          SETDP    0378          TXDATA   07BF
RWACH2   0DFE          SETREG   0676          UPDATE   0359
RWACH3   0E10          SKATE    0C5B          UPDBF1   0CD9
RWATCH   0DE9          SKATE1   0C60          UPDBF2   0CFB
RXDAT1   07EC          SKATE2   0C68          UPDBF3   0D1F
RXDAT2   0809          SKATE3   0C71          UPDBF4   0D31
RXDAT3   0819          SKEYIN   040A          UPDBF5   0D4A
RXDATA   07EA          SKEYL1   0417          UPDBUF   0CD3
SCAN     0085          SKEYRL   0416          VERS     037E
SCAND    03D0          SPLIT    0B5B          WIN      0B4B
SCAND1   03D8          SPTEMP   3FC4          WWACH1   0E8D
SCAND2   03E2          SP_REG   3FEE          WWACH2   0E8F
SCAND3   03EB          SSTEP    056D          WWACH3   0EAA
SCOPE    0BC7          STEP     04AC          WWACH4   0EAD
SCOPE2   0BDC          STEP1    04C1          WWACH5   0EAF
SCOPE3   0BE4          STEP2    04CB          WWACH6   0EC0
SCOPE4   0BF3          STEP3    04D6          WWATCH   0E73
SCOPE5   0BFA          SWBEEP   0953          
SCOPE6   0C01          SWREG0   3FB8          

